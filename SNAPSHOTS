SNAPSHOTS

    --------------------------

    Basic idea, grab all the uncompressed state into a struct, eg. array of cubes

    Need position vec3 and orientation quaternion, and bool if interacting (red)
    (remember no simulation is running so how else would the right side know?)

    Work out how much bandwidth this would be for 900 cubes @ 60fps

    Stick it in a packet and send it across!

    Sequence number. Discard older packets. sequence_more_recent function.

    --------------------------

    Try reducing the send rate to 10 packets per-second

    Look it's popping. That's not cool.

    There is no simulation running on the right side, so what can we do?

    Linear interpolation.

    Hermite interpolation.

    Can we do better? Probably. My math isn't good enough. 

    Also, I'm interpolating the quaternions across splines linearly, which is wrong.

    --------------------------

    Nyquist limit.

    May be able to do better if you also send the direction of rotation,
    then you could ensure the interpolation takes the longest rotation path
    where appropriate.

    But the easiest way is to just limit the maximum speed of rotation.

    --------------------------

    Playout delay buffer properties.

    Basically the same as lockstep buffer?

    --------------------------

    Compress the vec3 with bounded fixed point.

    Probably need to add an edge to the world and a vertical bound (I think this is already done...)

    Calculate bandwidth used now.

    --------------------------

    Compress the quaternion with smallest three.

    --------------------------

    Still really big. What can we do?

    Most cubes don't move every frame. How can we take advantage of this?

    Delta encoding.

    Ack scheme etc.

    Fully implement this.

    What is the average bandwidth usage?

    Note that bandwidth initially is still very large.

    Might be a good idea to send the initial snapshot separately, perhaps via some specialized chunked send over UDP.

    (Quickly describe this in a paragraph)

    May have to consider MTU and perform your own packet fragmentation and reassembly over UDP.

    --------------------------

    Can we do better? Yes.

    Split up into a grid, design the grid so that cubes typically spend enough time
    in a grid cell to get the benefit of delta encoding, eg. the grid cell indices
    don't change from update to update.

    This way less bits can be used to express the xyz coordinates.

    --------------------------

    Can we encode the changed cubes better?

    Yes. Threshold for sending # of changed cubes with indices, vs. skip bits for unchanged cubes.

    Calculated it. 

    There's always more than one way to do it.

    --------------------------
