{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"CLIENT_ERROR",
				"CLIENT_ERROR_ConnectionRequestTimedOut"
			],
			[
				"Disconnec",
				"DisconnectAndSetError"
			],
			[
				"m_conn",
				"m_sendingConnectionRequestData"
			],
			[
				"CLIENT_STATE",
				"CLIENT_STATE_SendingConnectionRequest"
			],
			[
				"res",
				"resolveHostnameTimeout"
			],
			[
				"m_",
				"m_resolveHostnameData"
			],
			[
				"CLIENT_STATE_",
				"CLIENT_STATE_ResolvingHostname"
			],
			[
				"channel",
				"messageChannelConfig"
			],
			[
				"m_receive",
				"m_receiveLargeBlock"
			],
			[
				"resend",
				"resendRate"
			],
			[
				"max",
				"m_maxBlockFragments"
			],
			[
				"fragment",
				"blockFragmentSize"
			],
			[
				"frag",
				"largeBlockFragmentSize"
			],
			[
				"m_receiv",
				"m_receiveMessageId"
			],
			[
				"Pro",
				"ProcessPacketFailures"
			],
			[
				"disca",
				"PacketsDiscarded"
			],
			[
				"ack_bits",
				"test_generate_ack_bits"
			],
			[
				"m_rec",
				"m_receive_queue"
			],
			[
				"Receiv",
				"ReceivePacket"
			],
			[
				"IP",
				"IPv6"
			],
			[
				"Update",
				"UpdatePartyView_Blocking"
			],
			[
				"App",
				"ApplyImpulseAtWorldPoint"
			],
			[
				"Find",
				"FindObjectsInRadius"
			],
			[
				"generateVBandIB",
				"generateVBAndIBFromTexturedMesh"
			],
			[
				"inc",
				"incrementCounter"
			],
			[
				"is",
				"isPointOnBoard"
			],
			[
				"cont",
				"contentScaleFactor"
			],
			[
				"Collision",
				"CollisionResponseWithFriction"
			],
			[
				"true",
				"TestRunner"
			],
			[
				"PC",
				"PC_LE"
			],
			[
				"num",
				"numGameModes"
			],
			[
				"gamemodes",
				"gameModes"
			],
			[
				"getg",
				"getGameModeId"
			],
			[
				"NET_PLATFORM",
				"NET_PLATFORM_PS3"
			],
			[
				"test_async",
				"test_async_sockets_node_mesh"
			],
			[
				"Calculate",
				"CalculateChunkSizeWithHeader"
			],
			[
				"send",
				"sendChunkSlices"
			],
			[
				"Buffered",
				"NumBufferedPackets"
			],
			[
				"NumEvents",
				"NumEventsToSend"
			],
			[
				"receive",
				"receiveEventId"
			],
			[
				"pendingAck",
				"pendingAckQueue"
			],
			[
				"meas",
				"measuredBits"
			],
			[
				"cnn",
				"ndlConstants"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "Packages/User/C++11.sublime-build",
	"command_palette":
	{
		"height": 67.0,
		"selected_items":
		[
			[
				"syntax mark",
				"Set Syntax: Markdown"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"package install",
				"Package Control: Install Package"
			],
			[
				"Packinst",
				"Package Control: Install Package"
			],
			[
				"TODO",
				"Package Control: Discover Packages"
			],
			[
				"git",
				"Git: Commit history"
			],
			[
				"",
				"Package Control: Discover Packages"
			],
			[
				"Pack",
				"Package Control: Disable Package"
			],
			[
				"Package",
				"Preferences: Browse Packages"
			],
			[
				"Clang",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"Sub",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"Install",
				"Package Control: Install Package"
			]
		],
		"width": 647.0
	},
	"console":
	{
		"height": 416.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/gaffer/git/protocol/include/BSDSockets.h",
		"/Users/gaffer/git/protocol/include/Client.h",
		"/Users/gaffer/git/protocol/include/Server.h",
		"/Users/gaffer/git/protocol/CHANGES",
		"/Users/gaffer/git/protocol/tests/TestClientServer.cpp",
		"/Users/gaffer/git/protocol/TODO",
		"/Users/gaffer/git/protocol/include/ClientServerPackets.h",
		"/Users/gaffer/git/protocol/tests/SoakTest.cpp",
		"/Users/gaffer/git/protocol/tests/TestBSDSockets.cpp",
		"/Users/gaffer/git/protocol/tests/TestConnection.cpp",
		"/Users/gaffer/git/protocol/include/Channel.h",
		"/Users/gaffer/git/protocol/tests/TestAddress.cpp",
		"/Users/gaffer/git/protocol/tests/TestStream.cpp",
		"/Users/gaffer/git/protocol/tests/TestCommon.cpp",
		"/Users/gaffer/git/protocol/tests/TestDNSResolver.cpp",
		"/Users/gaffer/git/protocol/tests/TestBitPacker.cpp",
		"/Users/gaffer/git/protocol/tests/TestNetworkInterface.cpp",
		"/Users/gaffer/git/protocol/tests/TestReliableMessageChannel.cpp",
		"/Users/gaffer/git/protocol/include/ReliableMessageChannel.h",
		"/Users/gaffer/git/protocol/include/BitPacker.h",
		"/Users/gaffer/git/protocol/include/Resolver.h",
		"/Users/gaffer/git/protocol/Protocol.sublime-project",
		"/Users/gaffer/git/protocol/include/ClientServerPackets",
		"/Users/gaffer/git/protocol/tests/TestReliableMessageChannel",
		"/Users/gaffer/git/protocol/tests/TestConnection",
		"/Users/gaffer/git/protocol/tests/TestClientServer",
		"/Users/gaffer/git/protocol/include/Common.h",
		"/Users/gaffer/git/protocol/include/Connection.h",
		"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/c++/v1/memory",
		"/Users/gaffer/git/protocol/include/ChannelStructure.h",
		"/Users/gaffer/git/protocol/include/ChannelStructure",
		"/Users/gaffer/git/protocol/include/Stream.h",
		"/Users/gaffer/git/protocol/include/NetworkInterface.h",
		"/Users/gaffer/git/protocol/NOTES",
		"/Users/gaffer/git/protocol/include/NetworkSimulator.h",
		"/Users/gaffer/git/protocol/tests/TestBSDSockets",
		"/Users/gaffer/git/protocol/include/Address.h",
		"/Users/gaffer/git/protocol/tests/TestDNSResolver",
		"/Users/gaffer/git/protocol/include/DNSResolver.h",
		"/Users/gaffer/git/protocol/tests/TestAddress",
		"/Users/gaffer/git/protocol/tests/TestNetworkInterface",
		"/Users/gaffer/git/protocol/include/NetworkSimulator",
		"/Users/gaffer/git/protocol/output.txt",
		"/Users/gaffer/git/protocol/include/ReliableMessageChannel",
		"/Users/gaffer/git/protocol/output.tx",
		"/Users/gaffer/Dropbox/backup/protocol2/test/TestProtocolConfig.h",
		"/Users/gaffer/git/protocol/include/Packet.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolAssert.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolCommon.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolConstants.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolDataTypes.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolConfig.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolEnums.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolForwards.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolInstance.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolReadPackets.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolSerialize.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolLog.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolStream.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolUpdateStats.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolUtil.h",
		"/Users/gaffer/Dropbox/backup/protocol2/include/ProtocolWritePackets.h",
		"/Users/gaffer/Dropbox/backup/protocol2/test/Profile.cpp",
		"/Users/gaffer/Dropbox/backup/protocol2/test/SoakTest.cpp",
		"/Users/gaffer/Dropbox/backup/protocol2/test/StatsTest.cpp",
		"/Users/gaffer/git/protocol/include/UnreliableMessageChannel.h",
		"/Users/gaffer/git/protocol/include/Message.h",
		"/Users/gaffer/git/protocol/tests/SoakTest",
		"/Users/gaffer/git/protocol/include/MessageChannel.h",
		"/Users/gaffer/git/protocol/tests/TestBSDSocketsInterface.cpp",
		"/Users/gaffer/git/protocol/include/BSDSocketsInterface.h",
		"/Users/gaffer/git/protocol/include/Stream",
		"/Users/gaffer/Desktop/ProtocolStream.cpp",
		"/Users/gaffer/git/protocol/include/BitPacker",
		"/Users/gaffer/git/protocol/tests/TestBitPacker",
		"/Users/gaffer/Desktop/ProtocolStream.h",
		"/Users/gaffer/git/protocol/include/MessageChannel",
		"/Users/gaffer/git/protocol/README.md",
		"/Users/gaffer/git/protocol/tests/TestMessageChannel.cpp",
		"/Users/gaffer/git/protocol/MessageChannel.h",
		"/Users/gaffer/git/protocol/Connection.h",
		"/Users/gaffer/git/protocol/SoakTest.cpp",
		"/Users/gaffer/git/protocol/TestMessageChannel.cpp",
		"/Users/gaffer/git/protocol/TestNetworkInterface.cpp",
		"/Users/gaffer/git/protocol/Common.h",
		"/Users/gaffer/git/protocol/BSDSocketsInterface.h",
		"/Users/gaffer/git/protocol/TestBSDSocketsInterface.cpp",
		"/Users/gaffer/git/protocol/TestMessageChannel",
		"/Users/gaffer/git/protocol/MessageChannel",
		"/Users/gaffer/git/protocol/Message.h",
		"/Users/gaffer/git/protocol/TestCommon.cpp",
		"/Users/gaffer/git/protocol/TestConnection.cpp",
		"/Users/gaffer/git/protocol/TestDNSResolver.cpp",
		"/Users/gaffer/git/protocol/TestAddress.cpp",
		"/Users/gaffer/git/protocol/TestStream.cpp",
		"/Users/gaffer/git/protocol/Stream.h",
		"/Users/gaffer/git/protocol/BSDSocketsInterface",
		"/Users/gaffer/git/protocol/Resolver.h",
		"/Users/gaffer/git/protocol/TestDNSResolver",
		"/Users/gaffer/git/protocol/TestNetworkInterface",
		"/Users/gaffer/git/protocol/Packet.h",
		"/Users/gaffer/git/protocol/NetworkInterface.h",
		"/Users/gaffer/git/protocol/BSDSockets.h",
		"/Users/gaffer/git/protocol/DNSResolver.h",
		"/Users/gaffer/git/protocol/TestResolver.cpp",
		"/Users/gaffer/git/protocol/UnitTest.cpp",
		"/Users/gaffer/git/protocol/reference/06 - Real World Networking/NetReliability.h",
		"/Users/gaffer/git/protocol/Network.h",
		"/Users/gaffer/git/protocol/TestCommon",
		"/Users/gaffer/git/protocol/TestStream",
		"/Users/gaffer/git/protocol/reference/11 - Cubes/tests/TestEngine.cpp",
		"/Users/gaffer/git/protocol/Protocol.cpp",
		"/Users/gaffer/git/protocol/Address.h",
		"/Users/gaffer/git/protocol/Channel.h",
		"/Users/gaffer/git/protocol/reference/10 - Fiedler's Cubes/UnitTest++/MemoryOutStream.h",
		"/Users/gaffer/git/protocol/reference/10 - Fiedler's Cubes/UnitTest++/TestReporter.h",
		"/Users/gaffer/git/protocol/reference/10 - Fiedler's Cubes/UnitTest++/TestSuite.h",
		"/Users/gaffer/git/protocol/reference/08 - Authority Management/NetStream.h",
		"/Users/gaffer/git/protocol/reference/09 - Drop-In COOP for Open World Games/Scene.rb",
		"/Users/gaffer/git/protocol/reference/11 - Cubes/resources/ode-0.11.1/GIMPACT/GIMPACT-LICENSE-BSD.TXT",
		"/Users/gaffer/git/protocol/reference/11 - Cubes/resources/ode-0.11.1/ode/demo/basket_geom.h",
		"/Users/gaffer/git/protocol/reference/09 - Drop-In COOP for Open World Games/Game.rb",
		"/Users/gaffer/git/protocol/reference/11 - Cubes/resources/ode-0.11.1/tests/joints/slider.cpp",
		"/Users/gaffer/git/protocol/reference/10 - Fiedler's Cubes/UnitTest++/TestList.h",
		"/Users/gaffer/git/protocol/reference/11 - Cubes/resources/ode-0.11.1/tests/collision.cpp",
		"/Users/gaffer/git/protocol/Connection",
		"/Users/gaffer/git/protocol/reference/01 - Sending and Receiving Packets/Net.h",
		"/Users/gaffer/git/protocol/Packet"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"sam/*.h;sam/*.cpp",
			"sam/*.h,sam/*.cpp",
			"sam/*.h sam/*.cpp",
			"*.h *.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"*.h",
			"*.cpp",
			"*.cpp *.h",
			"*.cpp; *.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"recie",
			"sent packet",
			"m_receiveBuffer",
			"ReceivePacketInternal",
			"htons",
			"Sleep",
			"PacketFactor",
			"messageChannel = ",
			"config.port = ",
			"ChannelConfig",
			"SetINterface",
			"[&",
			"ChannelStructure",
			"m_interface->",
			"m_interface",
			"interface",
			"protocolId",
			"ReceivePackets",
			"cout <<",
			"networkInterface->Update",
			"sendto failed",
			"accumulator",
			"SendingConnectionRequest",
			"SendingConnectio",
			"packet->",
			"cout << ",
			"ms",
			"sleep",
			"Connect",
			"Disconnect",
			".Update(",
			"Configuration",
			"Channel",
			"cout << ",
			"m_sendLargeBlock",
			"m_sendLarge",
			"large block",
			"AddState",
			"Address address(",
			"SendPacket",
			"Simulator",
			"m_config",
			"todo:",
			"\"read packet failure",
			".GetSequence",
			"->GetSequence()",
			"\"read packet",
			"\"receive packet",
			"\"process acks",
			"cout << ",
			"->GetSequence",
			".sequence = ",
			"sent message",
			"process ack",
			"ProcessAck",
			"cout << ",
			"random_float",
			"random_int",
			"random",
			"BSD",
			"_interfac",
			"Interfac",
			"Interface",
			"todo",
			"todo: ",
			"todo:",
			"todo",
			"% 4",
			"messagechannel",
			"block size is",
			"cout",
			"ceil",
			"sending large block",
			"ceil",
			"fragmentSize",
			"GenerateAckBits",
			"generate_ack_bits",
			"blockSize = ",
			"todo ",
			"// todo:",
			"blockSize",
			"->valid = ",
			"->fragment = ",
			"fragment;",
			"config->",
			"first entry is large",
			"todo:",
			"SendQueueEntry",
			"m_sentPackets",
			"SentPacketEntry",
			"ReceiveQueueEntry",
			"fragments",
			"safety",
			"maxMessageSize",
			"maxMessageSize * ",
			"maxMessageSize",
			"Send",
			"event",
			"GetData",
			"Stream",
			"STREAM_Write",
			"serialize_int",
			"Stream stream",
			"<Stream>()",
			"Stream( ",
			"cout << ",
			"SerializeBits",
			"m_buffer",
			"bufferdata",
			"CHAR",
			"SerializeBits",
			"m_block",
			"Block",
			"BlockMessage",
			"MessageChannel",
			"Message",
			"MessageChannel",
			"cout << ",
			"add message to receive queue: 0",
			"timeLastSent",
			"cout << ",
			"timeLastSent",
			"resendRate",
			"_DEBUG",
			"DEBUG",
			"_DEBUG",
			"cout << ",
			"ReadPacket"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"bitpacker",
			"    ",
			"namespace sam",
			"namespace sam {",
			"America 2008-2012",
			"netProtocolOld.h"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 463.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "Protocol.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"changes",
				"CHANGES"
			],
			[
				"todo",
				"TODO"
			],
			[
				"canges",
				"CHANGES"
			],
			[
				"client.h",
				"include/Client.h"
			],
			[
				"server.h",
				"include/Server.h"
			],
			[
				"bsdsockets.h",
				"include/BSDSockets.h"
			],
			[
				"testclientserver.cpp",
				"tests/TestClientServer.cpp"
			],
			[
				"sockets.h",
				"include/BSDSockets.h"
			],
			[
				"testbsdsockets.cpp",
				"tests/TestBSDSockets.cpp"
			],
			[
				"testbsd",
				"tests/TestBSDSockets.cpp"
			],
			[
				"bsdsocket",
				"include/BSDSockets.h"
			],
			[
				"soaktest.cpp",
				"tests/SoakTest.cpp"
			],
			[
				"relibalemessagechannel.h",
				"include/ReliableMessageChannel.h"
			],
			[
				"bitpacker.h",
				"include/BitPacker.h"
			],
			[
				"testmessag",
				"tests/TestReliableMessageChannel.cpp"
			],
			[
				"soaktest",
				"tests/SoakTest.cpp"
			],
			[
				"testreliable",
				"tests/TestReliableMessageChannel.cpp"
			],
			[
				"test",
				"tests/SoakTest.cpp"
			],
			[
				"testconnection.cpp",
				"tests/TestConnection.cpp"
			],
			[
				"client",
				"include/ClientServerPackets.h"
			],
			[
				"bsd",
				"include/BSDSockets.h"
			],
			[
				"reliablemessagechannel.h",
				"include/ReliableMessageChannel.h"
			],
			[
				"channel.h",
				"include/Channel.h"
			],
			[
				"testconnection",
				"tests/TestConnection.cpp"
			],
			[
				"testreliablemessagechannel.cpp",
				"tests/TestReliableMessageChannel.cpp"
			],
			[
				"channelstructure.h",
				"include/ChannelStructure.h"
			],
			[
				"connection.h",
				"include/Connection.h"
			],
			[
				"common.h",
				"include/Common.h"
			],
			[
				"clientserverpackets.h",
				"include/ClientServerPackets.h"
			],
			[
				"steram.h",
				"include/Stream.h"
			],
			[
				"server",
				"include/ClientServerPackets.h"
			],
			[
				"networkinterface.h",
				"include/NetworkInterface.h"
			],
			[
				"stream.h",
				"include/Stream.h"
			],
			[
				"resolver.h",
				"include/Resolver.h"
			],
			[
				"res",
				"include/Resolver.h"
			],
			[
				"dns",
				"tests/TestDNSResolver.cpp"
			],
			[
				"simulator.h",
				"include/NetworkSimulator.h"
			],
			[
				"testdns",
				"tests/TestDNSResolver.cpp"
			],
			[
				"testres",
				"tests/TestDNSResolver.cpp"
			],
			[
				"resolve.h",
				"include/Resolver.h"
			],
			[
				"interface.h",
				"include/NetworkInterface.h"
			],
			[
				"server.cpp",
				"tests/TestClientServer.cpp"
			],
			[
				"notes",
				"NOTES"
			],
			[
				"testnetwok",
				"tests/TestNetworkInterface.cpp"
			],
			[
				"bsdsoc",
				"include/BSDSockets.h"
			],
			[
				"testaddress.cpp",
				"tests/TestAddress.cpp"
			],
			[
				"testreliabl",
				"tests/TestReliableMessageChannel.cpp"
			],
			[
				"output.txt",
				"output.txt"
			],
			[
				"out",
				"output.txt"
			],
			[
				"output",
				"output.txt"
			],
			[
				"reliable",
				"include/ReliableMessageChannel.h"
			],
			[
				"network",
				"include/NetworkSimulator.h"
			],
			[
				"interface",
				"include/NetworkInterface.h"
			],
			[
				"packet.h",
				"include/Packet.h"
			],
			[
				"bsdsockets.cpp",
				"tests/TestBSDSockets.cpp"
			],
			[
				"message.h",
				"include/Message.h"
			],
			[
				"testcommon.cpp",
				"tests/TestCommon.cpp"
			],
			[
				"",
				"include/ReliableMessageChannel.h"
			],
			[
				"testrel",
				"tests/TestReliableMessageChannel.cpp"
			],
			[
				"bitpacke.h",
				"include/BitPacker.h"
			],
			[
				"messagechannel.h",
				"include/MessageChannel.h"
			],
			[
				"bitacker.h",
				"include/BitPacker.h"
			],
			[
				"testre",
				"tests/TestReliableMessageChannel.cpp"
			],
			[
				"soak",
				"tests/SoakTest.cpp"
			],
			[
				"bsdsocketsinterface.h",
				"include/BSDSocketsInterface.h"
			],
			[
				"testreli",
				"tests/TestReliableMessageChannel.cpp"
			],
			[
				"teststream.cpp",
				"tests/TestStream.cpp"
			],
			[
				"testbit",
				"tests/TestBitPacker.cpp"
			],
			[
				"testmessage",
				"tests/TestReliableMessageChannel.cpp"
			],
			[
				"rel",
				"include/ReliableMessageChannel.h"
			],
			[
				"messagech",
				"include/ReliableMessageChannel.h"
			],
			[
				"testreliablem",
				"tests/TestReliableMessageChannel.cpp"
			],
			[
				"testmes",
				"tests/TestMessageChannel.cpp"
			],
			[
				"testmessagechannel.cpp",
				"TestMessageChannel.cpp"
			],
			[
				"message",
				"TestMessageChannel.cpp"
			],
			[
				"testnet",
				"TestNetworkInterface.cpp"
			],
			[
				"testin",
				"TestNetworkInterface.cpp"
			],
			[
				"testinterface",
				"TestNetworkInterface.cpp"
			],
			[
				"testinterfac",
				"TestNetworkInterface.cpp"
			],
			[
				"testnetworkinterface.cpp",
				"TestNetworkInterface.cpp"
			],
			[
				"network.h",
				"Network.h"
			],
			[
				"unittest.cpp",
				"UnitTest.cpp"
			],
			[
				"protocol.cpp",
				"Protocol.cpp"
			],
			[
				"goals",
				"GOALS"
			],
			[
				"goal",
				"GOALS"
			],
			[
				"netrel",
				"reference/06 - Real World Networking/NetReliability.h"
			],
			[
				"protocol",
				"Protocol.cpp"
			],
			[
				"sen",
				"reference/01 - Sending and Receiving Packets/Net.h"
			],
			[
				"seria",
				"Serialize.cpp"
			],
			[
				"ser",
				"Serialize.cpp"
			],
			[
				"serialize.cpp",
				"reference/Serialize.cpp"
			],
			[
				"se",
				"reference/Serialize.cpp"
			],
			[
				"netstream.h",
				"reference/07 - Reading and Writing Packets/NetStream.h"
			],
			[
				"sessions.cpp",
				"durango_sessions.cpp"
			],
			[
				"util.cpp",
				"durango_util.cpp"
			],
			[
				"util.h",
				"durango_util.h"
			],
			[
				"party.cpp",
				"durango_party.cpp"
			],
			[
				"sign_in.cpp",
				"durango_sign_in.cpp"
			],
			[
				"sessions",
				"durango_sessions.cpp"
			],
			[
				"durango_sign_in.cpp",
				"durango_sign_in.cpp"
			],
			[
				"durango_sessions.cpp",
				"durango_sessions.cpp"
			],
			[
				"durango_party.cpp",
				"durango_party.cpp"
			],
			[
				"durango_party.h",
				"durango_party.h"
			],
			[
				"durango_util.h",
				"durango_util.h"
			],
			[
				"durango_util.cpp",
				"durango_util.cpp"
			],
			[
				"coffee",
				"client/code/app/app.coffee"
			],
			[
				"dibs.coffee",
				"server/rpc/dibs.coffee"
			],
			[
				"app.coffee",
				"client/code/app/app.coffee"
			],
			[
				"jade",
				"client/templates/chat/command.jade"
			],
			[
				"status.",
				"client/templates/chat/status.jade"
			],
			[
				"command.jade",
				"client/templates/chat/command.jade"
			],
			[
				"app",
				"client/views/app.jade"
			],
			[
				"a",
				"client/code/app/app.coffee"
			],
			[
				"styl",
				"node_modules/socketstream/node_modules/connect/lib/public/style.css"
			],
			[
				"app.js",
				"app.js"
			],
			[
				"demo.coffee",
				"server/rpc/demo.coffee"
			],
			[
				"leader",
				"server/rpc/leaderboard.coffee"
			],
			[
				"demo.js",
				"node_modules/socketstream/new_project/server/rpc/demo.js"
			],
			[
				"package.json",
				"package.json"
			],
			[
				".",
				".nodemonignore"
			],
			[
				"message.jade",
				"client/templates/chat/message.jade"
			],
			[
				"entry.coffee",
				"client/code/app/entry.coffee"
			],
			[
				"biconvex.h",
				"Biconvex.h"
			],
			[
				"view",
				"xcode/Virtual Go/ViewController.m"
			],
			[
				"viewcontroller.m",
				"xcode/Virtual Go/ViewController.m"
			],
			[
				"sound.h",
				"Sound.h"
			],
			[
				"gameinstance.h",
				"GameInstance.h"
			],
			[
				"stoneinstance.h",
				"StoneInstance.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 404.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 276.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
