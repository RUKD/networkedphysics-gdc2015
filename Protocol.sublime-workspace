{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Stone",
				"stoneSizeNames"
			],
			[
				"vertex",
				"VertexPosition"
			],
			[
				"last",
				"lastConnectedClientTime"
			],
			[
				"CLIENT_STT",
				"CLIENT_STATE_CONNECTED"
			],
			[
				"test_client_and_",
				"test_client_and_server_data_reconnect"
			],
			[
				"datablock",
				"dataBlockReceiver"
			],
			[
				"ClientServerDatABlock",
				"ClientServerDataBlockSender"
			],
			[
				"ClientSer",
				"ClientServerDataBlockSender"
			],
			[
				"test_",
				"test_data_block_send_and_receive_packet_loss"
			],
			[
				"CLIENT_STATE_SENDING",
				"CLIENT_STATE_SENDING_CLIENT_DATA"
			],
			[
				"UpdatESend",
				"UpdateSendClientData"
			],
			[
				"read",
				"readyForConnection"
			],
			[
				"SERVER",
				"SERVER_CLIENT_STATE_READY_FOR_CONNECTION"
			],
			[
				"max",
				"maxServerDataSize"
			],
			[
				"fargmen",
				"fragmentId"
			],
			[
				"ack",
				"ackedFragment"
			],
			[
				"CLIENH_",
				"CLIENT_SERVER_PACKET_CONNECTION_CHALLENGE"
			],
			[
				"CLIENT_STATE_",
				"CLIENT_STATE_RECEIVING_SERVER_DATA"
			],
			[
				"m_num",
				"m_numServerDataFragments"
			],
			[
				"CLIENT_",
				"CLIENT_SERVER_PACKET_CONNECTION"
			],
			[
				"CreateChann",
				"CreateChannelDataInternal"
			],
			[
				"NUM",
				"NUM_CLIENT_SERVER_PACKETS"
			],
			[
				"PROTOCOL_",
				"PROTOCOL_USE_RESOLVER"
			],
			[
				"Block",
				"BlockMessageType"
			],
			[
				"RES",
				"RESOLVE_IN_PROGRESS"
			],
			[
				"RESOL",
				"RESOLVE_IN_PROGRESS"
			],
			[
				"R",
				"ResolveResult"
			],
			[
				"RESOLVE",
				"RESOLVE_SUCCEEDED"
			],
			[
				"REsolv",
				"ResolveWrapper"
			],
			[
				"BSD_SOCKET_COUNTER_SERIAL",
				"BSD_SOCKET_COUNTER_SERIALIZE_READ_OVERFLOW"
			],
			[
				"CLIENT_ERROR_Co",
				"CLIENT_ERROR_ConnectionError"
			],
			[
				"REL",
				"RELIABLE_MESSAGE_CHANNEL_ERROR_SEND_QUEUE_FULL"
			],
			[
				"BSD_S",
				"BSD_SOCKET_ERROR_NONE"
			],
			[
				"Small",
				"MaxSmallBlockSize"
			],
			[
				"resol",
				"ResolveWrapper"
			],
			[
				"client",
				"clientNetworkInterface"
			],
			[
				"m_oldest",
				"m_oldestUnackedMessageId"
			],
			[
				"m_",
				"m_oldestUnackedMessageId"
			],
			[
				"SendLrg",
				"SendLargeBlockData"
			],
			[
				"SERVER_CLIENT_",
				"SERVER_CLIENT_Connected"
			],
			[
				"SERVER_CLIENT",
				"SERVER_CLIENT_Disconnected"
			],
			[
				"CLIENT_ERROR_Td",
				"CLIENT_ERROR_ConnectionTimedOut"
			],
			[
				"CLIENT_ERROR_Conn",
				"CLIENT_ERROR_ConnectionRequestDenied"
			],
			[
				"CLIENT_STATE",
				"CLIENT_STATE_ReadyForConnection"
			],
			[
				"SERE",
				"SERVER_CLIENT_SendingChallenge"
			],
			[
				"CLIENT_ERROR",
				"CLIENT_ERROR_ConnectionRequestTimedOut"
			],
			[
				"Disconnec",
				"DisconnectAndSetError"
			],
			[
				"m_conn",
				"m_sendingConnectionRequestData"
			],
			[
				"res",
				"resolveHostnameTimeout"
			],
			[
				"channel",
				"messageChannelConfig"
			],
			[
				"m_receive",
				"m_receiveLargeBlock"
			],
			[
				"resend",
				"resendRate"
			],
			[
				"fragment",
				"blockFragmentSize"
			],
			[
				"frag",
				"largeBlockFragmentSize"
			],
			[
				"m_receiv",
				"m_receiveMessageId"
			],
			[
				"Pro",
				"ProcessPacketFailures"
			],
			[
				"disca",
				"PacketsDiscarded"
			],
			[
				"ack_bits",
				"test_generate_ack_bits"
			],
			[
				"m_rec",
				"m_receive_queue"
			],
			[
				"Receiv",
				"ReceivePacket"
			],
			[
				"IP",
				"IPv6"
			],
			[
				"Update",
				"UpdatePartyView_Blocking"
			],
			[
				"App",
				"ApplyImpulseAtWorldPoint"
			],
			[
				"Find",
				"FindObjectsInRadius"
			],
			[
				"generateVBandIB",
				"generateVBAndIBFromTexturedMesh"
			],
			[
				"inc",
				"incrementCounter"
			],
			[
				"is",
				"isPointOnBoard"
			],
			[
				"cont",
				"contentScaleFactor"
			],
			[
				"Collision",
				"CollisionResponseWithFriction"
			],
			[
				"true",
				"TestRunner"
			],
			[
				"PC",
				"PC_LE"
			],
			[
				"num",
				"numGameModes"
			],
			[
				"gamemodes",
				"gameModes"
			],
			[
				"getg",
				"getGameModeId"
			],
			[
				"NET_PLATFORM",
				"NET_PLATFORM_PS3"
			],
			[
				"test_async",
				"test_async_sockets_node_mesh"
			],
			[
				"Calculate",
				"CalculateChunkSizeWithHeader"
			],
			[
				"send",
				"sendChunkSlices"
			],
			[
				"Buffered",
				"NumBufferedPackets"
			],
			[
				"NumEvents",
				"NumEventsToSend"
			],
			[
				"receive",
				"receiveEventId"
			],
			[
				"pendingAck",
				"pendingAckQueue"
			],
			[
				"meas",
				"measuredBits"
			],
			[
				"cnn",
				"ndlConstants"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "Packages/User/C++11 (Client).sublime-build",
	"command_palette":
	{
		"height": 127.0,
		"selected_items":
		[
			[
				"TODO",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"syntax mark",
				"Set Syntax: Markdown"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"package install",
				"Package Control: Install Package"
			],
			[
				"Packinst",
				"Package Control: Install Package"
			],
			[
				"git",
				"Git: Commit history"
			],
			[
				"",
				"Package Control: Discover Packages"
			],
			[
				"Pack",
				"Package Control: Disable Package"
			],
			[
				"Package",
				"Preferences: Browse Packages"
			],
			[
				"Clang",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"Sub",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"Install",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 416.0,
		"history":
		[
			"print 'hello'",
			"print \"hello\"",
			"ls",
			"ls -al",
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/gaffer/git/protocol"
	],
	"file_history":
	[
		"/Users/gaffer/git/protocol/src/game/MeshManager.cpp",
		"/Users/gaffer/git/protocol/data/shaders/Stone.frag",
		"/Users/gaffer/git/protocol/data/shaders/Stone.vert",
		"/Users/gaffer/git/protocol/tools/StoneGenerator/StoneGenerator.cpp",
		"/Users/gaffer/git/protocol/TODO",
		"/Users/gaffer/git/protocol/CHANGES",
		"/Users/gaffer/git/protocol/src/game/StoneRender.cpp",
		"/Users/gaffer/git/protocol/src/game/Game.cpp",
		"/Users/gaffer/git/protocol/data/stones/Black-22.mesh",
		"/Users/gaffer/git/protocol/src/protocol/Stream.h",
		"/Users/gaffer/git/protocol/tests/SoakProtocol.cpp",
		"/Users/gaffer/git/protocol/src/game/ShaderManager.h",
		"/Users/gaffer/git/protocol/tools/StoneGenerator/Mesh.h",
		"/Users/gaffer/git/protocol/build/StoneGenerator.make",
		"/Users/gaffer/git/protocol/data/shaders/Subroutine.vert",
		"/Users/gaffer/git/protocol/src/vectorial/vec3f.h",
		"/Users/gaffer/git/protocol/src/game/Font.cpp",
		"/Users/gaffer/git/protocol/data/shaders/Font.frag",
		"/Users/gaffer/git/protocol/tools/FontBuilder/FontBuilder.cpp",
		"/Users/gaffer/git/protocol/build/obj/x64/Debug/Client/MeshManager.d",
		"/Users/gaffer/git/protocol/src/game/Render.h",
		"/Users/gaffer/git/protocol/src/game/StoneRender.h",
		"/Users/gaffer/git/protocol/premake4.lua",
		"/Users/gaffer/git/protocol/data/shaders/Phong.frag",
		"/Users/gaffer/git/protocol/WOULD BE NICE",
		"/Users/gaffer/git/protocol/src/game/FontManager.cpp",
		"/Users/gaffer/git/protocol/src/game/Render.cpp",
		"/Users/gaffer/git/protocol/src/game/FontManager.h",
		"/Users/gaffer/git/protocol/build/obj/x64/Debug/Client/Font.d",
		"/Users/gaffer/git/protocol/build/FontBuilder.make",
		"/Users/gaffer/git/protocol/data/fonts/AnonymousPro/README.txt",
		"/Users/gaffer/git/protocol/src/game/GameServer.h",
		"/Users/gaffer/git/protocol/src/game/GameClient.h",
		"/Users/gaffer/git/protocol/src/game/StoneManager.cpp",
		"/Users/gaffer/git/protocol/src/game/MeshManager.h",
		"/Users/gaffer/git/protocol/src/game/ShaderManager.cpp",
		"/Users/gaffer/git/protocol/src/vectorial/vec2f.h",
		"/Users/gaffer/git/protocol/data/shaders/Triangle.vert",
		"/Users/gaffer/git/protocol/virtualgo.make",
		"/Users/gaffer/git/protocol/src/protocol/Message.h",
		"/Users/gaffer/git/protocol/src/core/Memory.cpp",
		"/Users/gaffer/git/protocol/src/game/StoneManager.h",
		"/Users/gaffer/git/protocol/tests/TestDataBlockSendAndReceive.cpp",
		"/Users/gaffer/git/protocol/src/core/Log.h",
		"/Users/gaffer/git/protocol/LICENCE",
		"/Users/gaffer/git/protocol/data/fonts/AnonymousPro/FONTLOG.txt",
		"/Users/gaffer/git/protocol/data/fonts/Inconsolata/Inconsolata.otf",
		"/Users/gaffer/git/protocol/src/virtualgo/InertiaTensor.h",
		"/Users/gaffer/git/protocol/src/game/Global.h",
		"/Users/gaffer/git/protocol/src/protocol/Channel.h",
		"/Users/gaffer/git/protocol/src/core/Core.cpp",
		"/Users/gaffer/git/protocol/src/network/Interface.h",
		"/Users/gaffer/git/protocol/src/game/Global.cpp",
		"/Users/gaffer/git/protocol/src/virtualgo/Stones.h",
		"/Users/gaffer/git/protocol/src/core/Types.h",
		"/Users/gaffer/git/protocol/src/game/GameChannelStructure.h",
		"/Users/gaffer/git/cubes/shared/Game.cpp",
		"/Users/gaffer/git/cubes/resources/ode-0.11.1/GIMPACT/GIMPACT-LICENSE-BSD.TXT",
		"/Users/gaffer/git/protocol/src/game/GameMessages.h",
		"/Users/gaffer/git/protocol/src/core/Memory.h",
		"/Users/gaffer/git/protocol/src/core/File.h",
		"/Users/gaffer/git/protocol/data/stones/Stone-Black-22.mesh",
		"/Users/gaffer/git/protocol/data/stones/Stones.bin",
		"/Users/gaffer/git/protocol/src/virtualgo/Stone.h",
		"/Users/gaffer/git/protocol/src/core/Core.h",
		"/Users/gaffer/git/protocol/src/virtualgo/Biconvex.h",
		"/Users/gaffer/git/protocol/src/core/File.cpp",
		"/Users/gaffer/experiments/datablock/net_datablock.cpp",
		"/Users/gaffer/git/cubes/resources/ode-0.11.1/OPCODE/OPC_TreeBuilders.cpp",
		"/Users/gaffer/git/protocol/src/virtualgo/Board.h",
		"/Users/gaffer/git/cubes/resources/ode-0.11.1/OPCODE/OPC_SphereTriOverlap.h",
		"/Users/gaffer/git/cubes/resources/ode-0.11.1/tests/UnitTest++/src/Posix/SignalTranslator.cpp",
		"/Users/gaffer/git/cubes/shared/Simulation.cpp",
		"/Users/gaffer/git/protocol/src/protocol/ClientServerDataBlock.cpp",
		"/Users/gaffer/git/protocol/Makefile",
		"/Users/gaffer/git/protocol/data/stones/Stones.json",
		"/Users/gaffer/git/virtualgo/Stone.h",
		"/Users/gaffer/git/protocol/src/virtualgo/Common.h",
		"/Users/gaffer/git/protocol/tests/UnitTest.cpp",
		"/Users/gaffer/git/cubes/vectorial/vec3f.h",
		"/Users/gaffer/git/protocol/src/virtualgo/Biconvex.cpp",
		"/Users/gaffer/git/protocol/src/vectorial/mat4f.h",
		"/Users/gaffer/git/protocol/src/game/Util.cpp",
		"/Users/gaffer/git/protocol/src/game/Util.h",
		"/Users/gaffer/git/cubes/Makefile",
		"/Users/gaffer/git/protocol/src/virtualgo/Board.cpp",
		"/Users/gaffer/git/protocol/src/virtualgo/Mesh.h",
		"/Users/gaffer/git/cubes/resources/ode-0.11.1/OPCODE/OPC_BoxBoxOverlap.h",
		"/Users/gaffer/git/virtualgo/Biconvex.h",
		"/Users/gaffer/git/cubes/resources/ode-0.11.1/ode/src/collision_trimesh_opcode.cpp",
		"/Users/gaffer/git/cubes/vectorial/vec2f.h",
		"/Users/gaffer/git/cubes/client/View.cpp",
		"/Users/gaffer/git/protocol/src/virtualgo/Support.cpp",
		"/Users/gaffer/git/protocol/src/virtualgo/Generate.cpp",
		"/Users/gaffer/git/protocol/src/virtualgo/Collision.cpp",
		"/Users/gaffer/git/protocol/src/virtualgo/CollisionDetection.h",
		"/Users/gaffer/git/protocol/src/virtualgo/CollisionResponse.h",
		"/Users/gaffer/git/protocol/src/virtualgo/Config.h",
		"/Users/gaffer/git/protocol/src/virtualgo/Intersection.h",
		"/Users/gaffer/git/protocol/src/virtualgo/Platform.h",
		"/Users/gaffer/git/protocol/src/virtualgo/Render.h",
		"/Users/gaffer/git/protocol/src/virtualgo/RigidBody.h",
		"/Users/gaffer/git/protocol/src/virtualgo/Platform.cpp",
		"/Users/gaffer/git/protocol/src/virtualgo/Tessellation.cpp",
		"/Users/gaffer/git/protocol/tests/TestCore.cpp",
		"/Users/gaffer/git/protocol/build/obj/x64/Debug/Client/Render.d",
		"/Users/gaffer/git/protocol/data/fonts/AnonymousPro/OFL.txt",
		"/Users/gaffer/git/protocol/data/fonts/Fonts.json",
		"/Users/gaffer/git/protocol/src/protocol/Object.h",
		"/Users/gaffer/git/protocol/src/game/Font.h",
		"/Users/gaffer/git/protocol/src/game/GameContext.h",
		"/Users/gaffer/git/protocol/src/game/GamePackets.h",
		"/Users/gaffer/git/protocol/src/game/Globals.cpp",
		"/Users/gaffer/git/protocol/data/shaders/Font.vert",
		"/Users/gaffer/git/protocol/data/shaders/Flat.vert",
		"/Users/gaffer/git/protocol/data/shaders/Flat.frag",
		"/Users/gaffer/git/protocol/src/core/Allocator.h",
		"/Users/gaffer/git/protocol/src/core/Array.h",
		"/Users/gaffer/git/protocol/data/shaders/Diffuse.frag",
		"/Users/gaffer/git/protocol/data/shaders/Diffuse.vert",
		"/Users/gaffer/git/protocol/src/protocol/ReliableMessageChannel.cpp",
		"/Users/gaffer/git/protocol/obj/x64/Debug/protocol/ReliableMessageChannel.d",
		"/Users/gaffer/git/protocol/obj/x64/Debug/protocol/Client.d",
		"/Users/gaffer/git/protocol/obj/x64/Debug/protocol/BitPacker.d",
		"/Users/gaffer/git/protocol/src/protocol/DataBlockReceiver.h",
		"/Users/gaffer/git/protocol/src/protocol/Enums.h",
		"/Users/gaffer/git/protocol/tests/ProfileClientServer.cpp",
		"/Users/gaffer/git/protocol/tests/TestClientServer.cpp"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"-CHANGES,-TODO",
			"",
			"-CHANGES,-TODO",
			"-CHANGES,TODO",
			"-CHANGES",
			"-CHANGES -TODO",
			"",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"sam/*.h;sam/*.cpp",
			"sam/*.h,sam/*.cpp",
			"sam/*.h sam/*.cpp",
			"*.h *.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"*.h",
			"*.cpp",
			"*.cpp *.h",
			"*.cpp; *.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"bevel",
			"_",
			"vao",
			"ReadObject",
			"%.2f:",
			"ReadObject",
			"ReadObect",
			"stones",
			"Manager",
			"ReadObject",
			"WriteObject",
			"vector",
			"test_string",
			"VECTORIAL_VEC3F_H",
			"params",
			"Params",
			"vectorial",
			"buffer",
			"StringStream",
			"// todo:",
			"// todo",
			"ReadObject",
			"// todo:",
			"// todo",
			"magic",
			"error:",
			"todo",
			"Glyph",
			"Glyph_Buffer",
			"GlyphBuffer",
			"fontAtlas->",
			"unsigned chan",
			"DrawString",
			"glDeleteBuffers",
			"BACK",
			"FRONT",
			"max",
			"// todo: need to ",
			"using namespace protocol;",
			"use namespace protocol;",
			"ADDRESS_IPV4",
			"PROTOCOL_CHECK",
			"PROTOCOL_ARRAY_NEW",
			"PROTOCOL_NEW_ARRAY",
			"PROTOCOL_DELETE_ARRAY",
			"PROTOCOL_DELETE",
			"PROTOCOL_NEW",
			"m_allocator",
			"PROTOCOL_ASSERT",
			"\"core/Common.h\"",
			"#include \"core/Common.h\"",
			"allocator",
			"PROTOCOL_",
			"Allocator",
			"PROTOCOL_",
			"PROTOCOL",
			"NetworkInterface.h",
			"NetworkSimulator::",
			"Netow",
			"PROTOCOL",
			"protocol",
			"core/Assert.h",
			"PROTOCOL",
			"CORE",
			"PROTOCOL",
			"zip",
			"shaderManager->",
			"shaderManager",
			"fontManager",
			"memory_global.",
			"globals.",
			"Globals.h",
			"->Get",
			"font",
			"Loading shader:",
			"new Font",
			"shader_prgor",
			"::get",
			"hash",
			"hash_string",
			"new ShaderManager",
			"Loading shader",
			"MaxPath",
			"MAX_PATH",
			"global",
			"m_global",
			"shader_program",
			"hash_string",
			"hash",
			"Loaded font",
			"Loaded",
			"print",
			"timeBase",
			"timeBAse",
			"rm -f",
			"shutdown",
			"not a valid font file",
			"timeBase",
			"Client",
			"CheckErr",
			"print",
			"BLEND",
			"ALPHA",
			"new Font",
			"short",
			"size_tint",
			"new",
			"size_t",
			"\"client\"",
			"CreateFont",
			"fstream",
			"max",
			"chars",
			"charschar",
			"chars",
			"ProcessFragment(",
			".state = ",
			"m_state = ",
			"SetError",
			"m_state = ",
			"\"::1",
			"NumClients",
			"serverData",
			", Client,",
			"Client",
			"MeasureStream",
			"random_int(",
			"ReceiveCompleted"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"CORE_CHECK",
			"CORE_ARRAY_NEW",
			"CORE_NEW_ARRAY",
			"CORE_DELETE_ARRAY",
			"CORE_DELETE",
			"CORE_NEW",
			"CORE_ASSERT",
			"Simulator::",
			"memory_globals.",
			"global.",
			"PROTOCOL_CHECK(",
			"PROTOCOL_ASSERT(",
			"assert",
			"bitpacker",
			"    ",
			"namespace sam",
			"namespace sam {",
			"America 2008-2012",
			"netProtocolOld.h"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 379.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "Protocol.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"stonegenerator.cpp",
				"tools/StoneGenerator/StoneGenerator.cpp"
			],
			[
				"game.cpp",
				"src/game/Game.cpp"
			],
			[
				"changes",
				"CHANGES"
			],
			[
				"todo",
				"TODO"
			],
			[
				"stone.frag",
				"data/shaders/Stone.frag"
			],
			[
				"meshmanager.cpp",
				"src/game/MeshManager.cpp"
			],
			[
				"stone.vert",
				"data/shaders/Stone.vert"
			],
			[
				"font.cpp",
				"src/game/Font.cpp"
			],
			[
				"meshmanager.h",
				"src/game/ShaderManager.h"
			],
			[
				"stonerender.h",
				"src/game/StoneRender.h"
			],
			[
				"render.h",
				"src/game/Render.h"
			],
			[
				"phong.frag",
				"data/shaders/Phong.frag"
			],
			[
				"phong.vert",
				"data/shaders/Phong.vert"
			],
			[
				"stonemanager.h",
				"src/game/StoneManager.h"
			],
			[
				"would",
				"WOULD BE NICE"
			],
			[
				"render.cpp",
				"src/game/Render.cpp"
			],
			[
				"fontmanager.cpp",
				"src/game/FontManager.cpp"
			],
			[
				"vec3f",
				"src/vectorial/vec3f.h"
			],
			[
				"mesh.h",
				"tools/StoneGenerator/Mesh.h"
			],
			[
				"stonemanager.cpp",
				"src/game/StoneManager.cpp"
			],
			[
				"shader",
				"src/game/ShaderManager.cpp"
			],
			[
				"shadermanager.cpp",
				"src/game/ShaderManager.cpp"
			],
			[
				"shadermanager.h",
				"src/game/ShaderManager.h"
			],
			[
				"inertiatensor.h",
				"src/virtualgo/InertiaTensor.h"
			],
			[
				"fontmanager.h",
				"src/game/FontManager.h"
			],
			[
				"global.h",
				"src/game/Global.h"
			],
			[
				"premake4.lua",
				"premake4.lua"
			],
			[
				"fontbuilder.cpp",
				"tools/FontBuilder/FontBuilder.cpp"
			],
			[
				"global.cpp",
				"src/game/Global.cpp"
			],
			[
				"stonegene",
				"tools/StoneGenerator/StoneGenerator.cpp"
			],
			[
				"stones.cpp",
				"src/virtualgo/Stones.cpp"
			],
			[
				"stones.h",
				"protocol/src/virtualgo/Stones.h"
			],
			[
				"globals.cpp",
				"protocol/src/game/Globals.cpp"
			],
			[
				"memory.h",
				"protocol/src/core/Memory.h"
			],
			[
				"file.h",
				"protocol/src/core/File.h"
			],
			[
				"stones.bin",
				"protocol/data/stones/Stones.bin"
			],
			[
				"biconvex.h",
				"protocol/src/virtualgo/Biconvex.h"
			],
			[
				"vec3f.h",
				"cubes/vectorial/vec3f.h"
			],
			[
				"core.h",
				"protocol/src/core/Core.h"
			],
			[
				"biconvex.cpp",
				"protocol/src/virtualgo/Biconvex.cpp"
			],
			[
				"board.h",
				"protocol/src/virtualgo/Board.h"
			],
			[
				"flat.vert",
				"data/shaders/Flat.vert"
			],
			[
				"flat.frag",
				"data/shaders/Flat.frag"
			],
			[
				"font.frag",
				"data/shaders/Font.frag"
			],
			[
				"font.vert",
				"data/shaders/Font.vert"
			],
			[
				"fonts.json",
				"data/fonts/Fonts.json"
			],
			[
				"font.h",
				"src/game/Font.h"
			],
			[
				"allocator.h",
				"src/core/Allocator.h"
			],
			[
				"diffuse.vert",
				"data/shaders/Diffuse.vert"
			],
			[
				"diffuse.frag",
				"data/shaders/Diffuse.frag"
			],
			[
				"gameclient.h",
				"src/game/GameClient.h"
			],
			[
				"gamechannel",
				"src/game/GameChannelStructure.h"
			],
			[
				"gamepackets.h",
				"src/game/GamePackets.h"
			],
			[
				"fontamnager.cpp",
				"src/game/FontManager.cpp"
			],
			[
				"soakclient",
				"tests/SoakClientServer.cpp"
			],
			[
				"testclientserver.cpp",
				"tests/TestClientServer.cpp"
			],
			[
				"soak",
				"tests/SoakProtocol.cpp"
			],
			[
				"core.cpp",
				"src/core/Core.cpp"
			],
			[
				"testconnection.cpp",
				"tests/TestConnection.cpp"
			],
			[
				"testcilentserver.cpp",
				"tests/TestClientServer.cpp"
			],
			[
				"testclient",
				"tests/TestClientServer.cpp"
			],
			[
				"testcore.cpp",
				"tests/TestCore.cpp"
			],
			[
				"testfound",
				"tests/TestFoundation.cpp"
			],
			[
				"testchannel",
				"tests/TestReliableMessageChannel.cpp"
			],
			[
				"testaddress.cpp",
				"tests/TestAddress.cpp"
			],
			[
				"testblokc.cpp",
				"tests/TestBlock.cpp"
			],
			[
				"unittest.cpp",
				"tests/UnitTest.cpp"
			],
			[
				"wouldbenice",
				"WOULD BE NICE"
			],
			[
				"cilentserverdatablock.cpp",
				"src/protocol/ClientServerDataBlock.cpp"
			],
			[
				"clientserevr",
				"src/protocol/ClientServerContext.h"
			],
			[
				"clientservercontext.cpp",
				"src/protocol/ClientServerContext.cpp"
			],
			[
				"reliable",
				"src/protocol/ReliableMessageChannel.cpp"
			],
			[
				"client.cpp",
				"src/protocol/Client.cpp"
			],
			[
				"datablockreceiver.cpp",
				"src/protocol/DataBlockReceiver.cpp"
			],
			[
				"datablock",
				"src/protocol/DataBlockReceiver.h"
			],
			[
				"clientserverdatablock.h",
				"src/protocol/ClientServerDataBlock.h"
			],
			[
				"client.h",
				"src/protocol/Client.h"
			],
			[
				"connection.h",
				"src/protocol/Connection.h"
			],
			[
				"channel.h",
				"src/protocol/Channel.h"
			],
			[
				"memory.cpp",
				"src/core/Memory.cpp"
			],
			[
				"common.cpp",
				"src/core/Common.cpp"
			],
			[
				"common.h",
				"src/core/Common.h"
			],
			[
				"config.h",
				"src/core/Config.h"
			],
			[
				"array.h",
				"src/core/Array.h"
			],
			[
				"types.h",
				"src/core/Types.h"
			],
			[
				"bsdsocket.cpp",
				"src/network/BSDSocket.cpp"
			],
			[
				"packet.cpp",
				"tests/TestPacketFactory.cpp"
			],
			[
				"block.cpp",
				"src/protocol/Block.cpp"
			],
			[
				"block.h",
				"src/protocol/Block.h"
			],
			[
				"steram.h",
				"src/protocol/Stream.h"
			],
			[
				"bsdsocket.h",
				"src/network/BSDSocket.h"
			],
			[
				"packetfactory.h",
				"src/protocol/PacketFactory.h"
			],
			[
				"simulator.h",
				"src/network/Simulator.h"
			],
			[
				"packet.h",
				"src/protocol/Packet.h"
			],
			[
				"stream.h",
				"src/protocol/Stream.h"
			],
			[
				"bitpacker.h",
				"src/protocol/BitPacker.h"
			],
			[
				"interfaec.h",
				"src/network/Interface.h"
			],
			[
				"address.h",
				"src/network/Address.h"
			],
			[
				"address.cpp",
				"src/network/Address.cpp"
			],
			[
				"simulator.cpp",
				"src/network/Simulator.cpp"
			],
			[
				"interface.h",
				"src/network/Interface.h"
			],
			[
				"hash.h",
				"src/core/Hash.h"
			],
			[
				"enums.h",
				"src/protocol/Enums.h"
			],
			[
				"premake4",
				"premake4.lua"
			],
			[
				"premake",
				"premake4.lua"
			],
			[
				"font.",
				"data/shaders/Font.frag"
			],
			[
				"globals.h",
				"game/Globals.h"
			],
			[
				"spe",
				"data/shaders/Specular.vert"
			],
			[
				"spec",
				"data/shaders/Specular.frag"
			],
			[
				"specular.vert",
				"data/shaders/Specular.vert"
			],
			[
				"triangle.vert",
				"data/shaders/Triangle.vert"
			],
			[
				"default.vert",
				"data/shaders/Default.vert"
			],
			[
				"triangle.frag",
				"data/shaders/Triangle.frag"
			],
			[
				"fonts",
				"data/fonts/Fonts.json-old"
			],
			[
				"tyeps.h",
				"include/Types.h"
			],
			[
				"testfoundation.cpp",
				"tests/TestFoundation.cpp"
			],
			[
				"default.frag",
				"data/shaders/Default.frag"
			],
			[
				"fonts.h",
				"game/Fonts.h"
			],
			[
				"frag",
				"data/shaders/Triangle.frag"
			],
			[
				"ver",
				"data/shaders/Triangle.vert"
			],
			[
				"vert",
				"data/shaders/Triangle.vert"
			],
			[
				"fonts.cpp",
				"game/Fonts.cpp"
			],
			[
				"premake4.lau",
				"premake4.lua"
			],
			[
				"font",
				"tools/FontBuilder/FontBuilder.cpp"
			],
			[
				"shaders.h",
				"game/Shaders.h"
			],
			[
				"glewinfo.txt",
				"glewinfo.txt"
			],
			[
				"fontbuildercpp",
				"tools/FontBuilder/FontBuilder.cpp"
			],
			[
				"makefont",
				"tools/makefont/makefont.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 404.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 276.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
