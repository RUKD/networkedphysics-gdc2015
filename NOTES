NOTES

-----------------------------------------

Client and server should be designed to be *Extendable*

My guess is that integration into the game will require
deriving your own client and server classes from the base.

-------------------------------------------------------------------------------------------------------------

Analysis of existing protocol serialization layers.

Cap'n Proto looks a bit overengineered (eg. second systems effect)

MessagePack looks a bit smaller and tight to me, but probably less efficient
over the wire and in terms of packing time.

Are protocol buffers worth integrating?

Google snappy looks like a nice candidate for message compression

Is there a nice library for message encryption between servers over UDP?
(eg. a shared secret is fine, server code is not distributed)

Nettle library looks OK. Does google have a library that they use?

On write:

    serialize write -> compress -> encrypt -> sign -> send

On read:

    recv -> verify signature -> decrypt -> serialize read

If I have my own reliable ordered block channel, I can then derive
specific channels from that, eg. JSONChannel, CapnProtoChannel,
MsgPackChannel, ThriftChannel and so on... should be easy to add
additional libraries and try them out. Try them all! :D

-------------------------------------------------------------------------------------------------------------

When sending a message, it should be up to the runtime to decide how to send it.

I have seen flexibility in systems at work that allow the game code to decide
whether something is reliable or not at runtime depending on context.

Do not assign "reliable" or "unreliable" to a message type statically at definition.

------------------------------------------------------------------------------------------------------------

What do I want my library to achieve?

    0. It should provide platform independent UDP abstraction over IPv4 and IPv6 (done)

    1. It should be suitable for both ad-hoc unreliable UDP messages and connection
       oriented protocol over UDP between client and server (done)

    2. It should operate over UDP and have reliability built in with ack bits (done)

    4. It should support bit-packing (done)

    5. It should be designed to work well with LZ dictionary based compression (done)

    6. It should be extremely fast, eg. low CPU cost for packet read and write (done)

    7. It should support send tables, entities, snapshots, delta encoding, interpolation and client side prediction (in progress)

------------------------------------------------------------------------------------------------------------
