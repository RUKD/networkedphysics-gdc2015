DONE:

TODO:

    ------------------------------------------------------

    Write article. 

    ------------------------------------------------------




































    -----------------------------------------------------------------------

    Leave compression related work for a second article, It will likely make this article too long!

    -----------------------------------------------------------------------

    Create new demo framework. "pm compression"

    -----------------------------------------------------------------------

    At this point start investigating compression approaches

    -----------------------------------------------------------------------

    Network simulator could have a flag set to actually perform the serialization of packets.

    Should be on by default.

    Clean up code that is manually serializing packets. 

    Let the network simulation do it for us instead. Less code!

    Extend network simulation to keep track of bandwidth send, given
    specific packet header size (eg: 24 bytes).

    -----------------------------------------------------------------------

    Implement a graph showing the bandwidth in the bottom right.

    It should display both average bandwidth up/down as well as 

    This should all come from the simluator.

    -----------------------------------------------------------------------

    First obvious win is if the object is at rest, send one bit
    and don't send lin/ang velocity.

    Many objects are at rest. This is a big win.

    -----------------------------------------------------------------------

    Next compress orientation. It's the biggest (16 bytes).

    Can get it down to 32 bytes pretty easily.

    Smallest three.

    -----------------------------------------------------------------------

    Compress linear velocity.

    Restrict linear velocity to some maximum (may already be done...)

    Make the linear velocity bound as tight as possible.

    Be aggressive with reducing linear velocity resolution. 

    Can synchronize it quite roughly. 

    It's not actually used for extrapolation, just interpolation so near enough is pretty good!

    -----------------------------------------------------------------------

    Finally... position...

    Bound the position in xy

    Bound position height (z) (i forget?)

    Compress position to 1cm resolution.

    How good is it?

    Can we do better?

    -----------------------------------------------------------------------

    Delta encoding.

    On left side buffer snapshots indexed by sequence #

    Right side keep track of most recent snapshot sequence # received
    (I believe the sequence buffer does this for us...)

    Right side send ack packets back to left side, if snapshots received
    that frame, with sequence # of most recent snapshot received.

    Left side keep track of most recent ack from right side in sequence #

    -------------------------------------------------------------------------

    Now when sending snapshots from left -> right, encode relative to base 
    snapshot # (pass base # and pointer to snapshot buffer into packet...)

    On serialize write, compare each object against base.

    If object is identical write one bit 0 indicating it has not changed.

    -----------------------------------------------------------------------

    Next, do the math. 

    Cost of indexing only the changed set of objects vs. 900 bits for yes/no.

    Write function to determine which approach is the best encoding,
    given the # of different cubes, vs. the # of total cubes.

    Extend the serialize function to use this encoding.

    -----------------------------------------------------------------------

    Next sort the cubes in order of id.

    Now write the cubes using a variable bit encoding for delta id.

    Is this effective?

    -----------------------------------------------------------------------

    Now encode position

    -----------------------------------------------------------------------
