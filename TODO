DONE:

TODO:

    Add a runtime test that verifies the PROTOCOL_BIG_ENDIAN is correct.

    Grab the big endian check from sophist.h and anything else useful.

    Update the LICENCE to incorporate the sophist.

    Remove the sophist header.

    --------------------

    assert should become "PROTOCOL_ASSERT". This needs to be redefined
    to call a user specified assert function.

    check should become "PROTOCOL_CHECK"

    ----------------------

    Fix the bitpacker to do bswap when necessary for big endian.

    I need to provide my own efficient byteswap functions in Common.h,
    eg. fast_ntonl, or just bswap if big endian in/out.

    --------------------

    I really want my own custom allocator so I can create as much
    memory as I want to use, and allocate from that. 

    This should be implemented as the "default allocator"

    Don't use malloc. Add a #define to drop back to malloc though.

    ------------------

    Now that I have a .h/.cpp split, the way I have structured
    the bitsquid containers means that I am not getting the full
    benefits of short compile times.

    Split back up into Types.h

    ------------------

    Replace all *runtime* STL usage with bitsquid containers.

    Still OK to use STL for other structures like memory leak tracking.

    ------------------



















    ------------------------

    Send a "Disconnect" packet from client -> server on disconnect,
    so the slot gets freed up a bit quicker than if it timed out.

    ------------------------

    Add code on server to send server data block to client.

    Block must be *constant*. eg. add it as part of server config

    Server sends one block fragment per-packet. No need for complicated reliability.

    Client replies with a separate packet acking each fragment he sees. Nothing complicated.

    Server just keeps sending them until all acked.

    Once server has acks for every fragment, go into the requesting client block state.

    Client should store, and make the server data block accessible via accessor.

    Add unit test to verify it's working, make sure to check the block size and contents match.

    ------------------------

    Some thing in reverse for client -> server block.

    Once the block transfers have completed, go to connected state.

    Make client block accessible per-server, and make sure it is cleared when the client disconnects.

    Add test to verify server receives the correct size block and contents from the client.

    ------------------------

    Implement fragmentation and reassembly for large packets, do this
    at the connection level once we have large snapshots, this would
    probably be a good idea to have -- set MTU to 1200 bytes.

    Keep it simple. A packet is received when all its fragments
    have been received. If any of the fragments are dropped,
    then the packet is dropped.

    I propose a simple header, eg. a packet type for fragment packet
    with a header x/y fragments and the sequence number of the *unacked*
    packet.

    Then the complexity becomes:

    a) writing the fragments, and not sending them out too rapidly
    b) on the receive side collating the fragments and reassembling them.

    ------------------------






    *** SEND TABLES ***

    ---------------

    Implement send table concept. Implement delta encoding tables etc.

    Use the server data to communicate this table down to the client.

    ------------------------

    Actually implement a client/server setup and host the server in the cloud.

    Provide build steps using chef/knife or whatever to easily deploy this server.

    ------------------------









WOULD BE NICE:

    -------------

    Should be able to determine if scratch allocator is being exhausted,
    and falling back to malloc, eg. add a check, and then check this once
    per-frame inside the soak test -- i definitely *dont* want the scratch
    falling back to malloc inside soak test.

    Alternatively, add a flag so it asserts if it has to fallback to scratch,
    but disable this by default because otherwise it won't pass the unit test.

    -------------

    I would like the scratch allocator to be more resilient in  debug builds, 
    eg. for it to have safety checks, eg. missing magic # where expected, assert.

    --------------------

    Find a way to move the future into the implementation (cpp)
    so we don't need #include <future> in a header file.

    --------------------

    I don't like the bool ipv6. Use address type instead, eg. ADDRESS_IPV6

    --------------------

    Restructure so that precompiled headers are used.

    Add timing to build steps so the efficiency can be measured.

    --------------------

    Once STL is removed, use this:

    package.buildflags = { "no-exceptions", "no-rtti" }

    Will this work with std::future?

    -------------------

    Remove std::string usage from Resolver interface and DNSResolver. (How?!)

    ----------------------

    Unit tests to add:

    Move the murmur hash test into TestCommon.cpp

    Verify that channel error percolates down and makes the server disconnect client,
    *and* on client side, makes the client disconnect from server.

    Make sure error is properly cleared on reset.

    Make sure we don't leak memory on connection reset (client reconnect should do this)

    ----------------------

    Google have some cool allocators. Check them out.

    ---------------------

    Branimir has an stl replacement with allocator support.

    Check it out. "BZ"

    ----------------------

    Add some macros to make defining serialization and messages easier.

    ----------------------

    Basic logging. Just start with a "Log" macro that can be redirected
    to a "Logger" interface via virtual fn. 

    Of course, this is disabled in release build (NDEBUG) but it is 
    the easiest way to make sure the library can output logs to the
    appropriate place (console, TTY, file, whatever...)

    Should logs include the "\n" at the end?

    It would be nice if they didn't have to. It's easy to forget.

    --------------------

    Optimization for fragments, track oldest unacked fragment id, and start there
    and go left to right to search for fragments to send.

    --------------------

    Add a new fragmentSendWindow config, eg. 64 and only look this far past
    the oldest unacked fragment. Should save unnecessary scans for large block
    sizes.

    --------------------

    Could save a bit of memory and maybe gain some speed by switching 
    the received fragment data to a bitfield

    We only need one bit per-fragment, "has it been received?"

    ----------------

    Idea for logging, have an enum of channels, and per-channel a level integer
    Initial level is zero. Enable logging by setting the level. Per-channel logs
    can be emitted by passing the level, which defaults to 1.

    Log( "hello everybody %d\n", value );

    On a per-file basis, specify the current log channel via #define

    This may require the project gets split up into cpp files first.

    ----------------

    For the message and block allocator, I'm thinking of a thread
    local storage allocator that detects when the thread that is
    calling it is *not* the same as the thread that it is running
    on, and in this case adds the deallocs to a list (atomic) which 
    is processed inside the allocator update.

    Alternatively, received messages could just have a policy
    that they will be deleted on the next update. Don't hold
    on to them.

    Same for blocks, potentially.

    ----------------

    Add counters for all the different things inside the large blocks,
    eg. # of large blocks sent, received, read/written, also # of
    fragments read/written.

    Write some basic tests to verify these counters are functional.

    ------------------

    Might be nice to add a validate step to the config for connection/channels
    because it's possible to specify a config that doesn't work now. eg. 
    interdependent parameters.

    Would be nice if the reliable message channel could report the minimal functional
    budget that would work for it, given its configuration. This would be great
    for the connection to budget for the channel.

    This should be in the base class for channel interface, so we can generically
    work with and budget channels decently without knowing exactly what they are.

    ----------------------

    Move the channel budget out of the channel config (static)
    and in to the connection. 

    Channel budget should be dynamic. The user should be able to derive their own 
    connection type and specify channel budgets dynamically based on flow control, 
    for example.

    ---------------------

    Implement packet encryption via key, plus hash to detect tampering (unified). Optional feature.

    ---------------------

    Implement an unreliable channel (messages), 
    eg. queue up unreliable messages to send and discard any that don't fit in the packet.
    Bonus: Provide an optional functor to sort the unreliable messages in order of importance.

    --------------------

    Implement an atomic queue on top of the client and server interface for sending
    and receiving user packets. This interface should allow running the actual serialization
    and packet reading entirely on a separate thread. Do it here where it is most natural,
    to avoid overcomplicating the interface/connection code.

    ----------------
