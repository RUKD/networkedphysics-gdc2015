DONE:

    Render splitscreen divider. For now, just using a small white border where cubes aren't drawn.

    Shadow issues show up in splitscreen at 1200x500 res, but not at 1000x500 res. Why?

    Notice that it still happens at 1000x400, but not 1000x500. Something to do with aspect ratio?

    Was a different rounding error for projection matrix for cubes vs. shadows (int divide vs. float)

    Settled on 1200x500 resolution as looking best for splitscreen. Gives a square look to each side.

TODO:

    -------------------------------------------

    Next, actually construct a packet containing input and delay the right simulation by say, 100ms.

    -------------------------------------------

    Now implement a reliability system between left and right simulation, eg. track sequence and ack,
    and include *all* inputs since last acked sequence.

    Note in the article it would be nice to be like, "OK. Lets beat TCP at its own game" 
    and then link to the reddit discussion saying why write your own TCP? Gaffer is flawed etc.

    Fuck those guys. I'm going to nail them.

    --------------------------------------------

    Now add a way to increase and decrease amount of packet loss.

    --------------------------------------------

    To really hammer this home, add a way to enable/disable the redundant inputs, 
    eg. simulate TCP behavior vs. the redundant UDP (eg. an ack/response system).

    -------------------------------------------

    Implement 1 bit for input delta encoding, eg. if the next input has not changed,
    just send one bit 0, otherwise 1 bit 1 and then the next input.

    Inputs don't change often in the cube sim so this should be a very effective compression.

    -------------------------------------------

    It would be super cool to detect "ESCAPE" to reset the simulation in the deterministic demo.

    Going to need to reset the simulation often I think.

    -------------------------------------------

    Add a non-deterministic mode that can be toggled on/off via key press.

    In this mode, just supress the code that sets the random seed to the current frame #.

    This non-deterministic mode is super awesome because it can be trivially enabled/disabled to break stuff.

    -------------------------------------------









    -------------------------------------------

    Snapshots demo

    -------------------------------------------

    Stateful demo

    -------------------------------------------

    Write rest of article series

    -------------------------------------------

    Polish cube demo implementation as much as possible

    Port to windows and make sure it runs on Win64

    Release source code for singleplayer, lockstep, snapshot and stateful demos.

    -------------------------------------------

    Prepare GDC slides from article series

    -------------------------------------------






    --------------------------------------------------------------

    Explore various different interpolation strategies to use for 2D linear motion.

    Share this demo with Nathan (pro-bono) and try to get some involvement back with their project.

    --------------------------------------------------------------

    Return to PBR rendering

    --------------------------------------------------------------

    Convert DDS loading to use nvImage to load HDR uffizi cubemap.

    Work on exposure and get the scene looking good with HDR, may need to bump up direct light intensity?

    ----------------------------------

    Get roughness working with this HDR cubemap, eg. use roughness to index the mip chain.

    Look into a normalized BRDF function that accepts roughness, eg. microfacet model.

    ----------------------------------

    Get fresnel working so some reflection is visible even on the diffuse stone and more 
    reflection is visible at grazing angles (quite important for realistic go stone visuals)

    ----------------------------------

    Reread Seb Legarde stuff again start to finish.

    http://seblagarde.wordpress.com/2011/08/17/hello-world/

    Dig in a bit deeper into the source material (especially Naty's siggraph talks)
    and understand the math and physical reasoning behind it.

    Start here:

    http://renderwonk.com/publications/s2010-shading-course/hoffman/s2010_physically_based_shading_hoffman_a_notes.pdf

    ----------------------------------

    Continue studying trip through the graphics pipeline.

    ----------------------------------

    Identify areas where my math is weak and work to study those parts.

    Khan Academy? Probably the best bet to start.

    Get a desk so I can study.

    ----------------------------------

    Get go board rendering working

    ----------------------------------

    Render skybox and then in-game, render a cubemap from the center of a stone (size 35?)

    Make sure this cubemap is captured in HDR, eg. pre-tonemapping.

    This cubemap can then be input into CubeMapGen or cmft to get a correct radiance 
    and irradiance cubemap including the go board in the scene, eg. reflected color of the wood.

    ----------------------------------

    Research raytracing signed distance fields for shadows

    ----------------------------------
