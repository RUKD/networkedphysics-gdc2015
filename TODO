DONE:

TODO:

    Now setup the begin/end and per-vertex calls for lit vertices.

    Begin call needs to:

        a) clear vertex index to zero

    Per-vertex lit needs to:

        a) assert we are inside begin/end for lit
        b) assert we have room in the vertex buffer for another vertex
        c) copy the vertex to the buffer

    End call needs to:

        a) bind the vao and vbo
        b) actually load the vertex data as streaming
        c) setup the uniforms, eg. light position, matrices
        d) kick off the actual drawcall
        e) unbind everything and set vertex index back to zero

    --------------------------------------------------------------

    Setup a way to easily get the current projection, model and view matrices

    Also work out how to pass in the current light as a uniform for lit.

    Get the basic cubes working with basic lighting.

    --------------------------------------------------------------

    Get the activation circle rendering

    --------------------------------------------------------------

    Get shadows rendering

    --------------------------------------------------------------

    Prep talk outline

    Prep talk slides

    --------------------------------------------------------------












    --------------------------------------------------------------

    Explore various different interpolation strategies to use for 2D linear motion.

    --------------------------------------------------------------

    Return to PBR rendering

    --------------------------------------------------------------


















    ----------------------------------

    Convert DDS loading to use nvImage to load HDR uffizi cubemap.

    Work on exposure and get the scene looking good with HDR, may need to bump up direct light intensity?

    ----------------------------------

    Get roughness working with this HDR cubemap, eg. use roughness to index the mip chain.

    Look into a normalized BRDF function that accepts roughness, eg. microfacet model.

    ----------------------------------

    Get fresnel working so some reflection is visible even on the diffuse stone and more 
    reflection is visible at grazing angles (quite important for realistic go stone visuals)

    ----------------------------------

    Reread Seb Legarde stuff again start to finish.

    http://seblagarde.wordpress.com/2011/08/17/hello-world/

    Dig in a bit deeper into the source material (especially Naty's siggraph talks)
    and understand the math and physical reasoning behind it.

    Start here:

    http://renderwonk.com/publications/s2010-shading-course/hoffman/s2010_physically_based_shading_hoffman_a_notes.pdf

    ----------------------------------

    Continue studying trip through the graphics pipeline.

    ----------------------------------

    Identify areas where my math is weak and work to study those parts.

    Khan Academy? Probably the best bet to start.

    Get a desk so I can study.

    ----------------------------------

    Get go board rendering working

    ----------------------------------

    Render skybox and then in-game, render a cubemap from the center of a stone (size 35?)

    Make sure this cubemap is captured in HDR, eg. pre-tonemapping.

    This cubemap can then be input into CubeMapGen or cmft to get a correct radiance 
    and irradiance cubemap including the go board in the scene, eg. reflected color of the wood.

    ----------------------------------

    Research raytracing signed distance fields for shadows

    ----------------------------------
