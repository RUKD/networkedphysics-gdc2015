DONE:

TODO:

    ----------------------------------------------------------------------

    Insert snapshot to the sliding window on send.

    Should blow up after 256

    On receive ack, ack sequence - 1 (necessary, because we want to keep ack)

    Should no longer blow up

    On receive snapshot, insert snapshot into sequence buffer

    ----------------------------------------------------------------------

    Extend simulator to have context set, context ptr would have two parts

    for serialize write, it is the pointer to the sliding window.

    for serialize read, it is the the pointer to the sequence buffer.

    ----------------------------------------------------------------------

    It should now be possible to perform the serialization for all compressed
    packets in-place vs. copying across packet data, eg. serialize in place
    to the serialize write from the sliding window, and serialize read directly
    into the sequence buffer.

    This way the packets themselves only need to include the sequence #
    and then the actual data is serialized directly in/out of the buffers
    without any copies.

    ----------------------------------------------------------------------

    Now when sending snapshots from left -> right, encode relative to base 
    snapshot # (pass base # and pointer to snapshot buffer into packet...)

    On serialize write, compare each object against base.

    If object is identical write one bit 0 indicating it has not changed.

    -----------------------------------------------------------------------

    Widen out the sliding window to 256 entries so I have something to render

    Adjust code so the # of entries for bandwidth average is specified, eg. 64.

    Then I need to take only the most recent n in the window for avg. bandwidth calc,
    while having the history for say 256 or 512 for rendering packet size histogram.

    Visualize graph of packet in light blue, one vertical line per-packet.

    -----------------------------------------------------------------------

    Verify bandwidth spikes initially with delta encoding but hits steady state

    -----------------------------------------------------------------------

    Next, do the math on object ids...

    Cost of indexing only the changed set of objects vs. 900 bits for yes/no.

    Write function to determine which approach is the best encoding,
    given the # of different cubes, vs. the # of total cubes.

    Extend the serialize function to use this encoding.

    -----------------------------------------------------------------------

    Next sort the cubes in order of id.

    Now write the cubes using a variable bit encoding for delta id.

    Is this effective?

    -----------------------------------------------------------------------

    Now encode position relative to previous position

    -----------------------------------------------------------------------

    Encode orientation relative to previous orientation

    -----------------------------------------------------------------------

    Encode linear velocity relative to previous linear velocity

    -----------------------------------------------------------------------

    Ready to write next article

    -----------------------------------------------------------------------
    