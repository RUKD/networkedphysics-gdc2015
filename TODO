DONE:

TODO:

    Design and code serialize_index_relative function

    It should only need one bit if the index is + 1

    It should have 2 bits for 2-6...

    3 bits for 7-...

    and so on.

    After a point (say >127), just serialialize the whole 10 bits.

    -----------------------------------------------------------------------

    Now write the cubes that have changed using a variable bit encoding from
    previous id, eg. one bit if the next object is 

    Ideally, variable bit encoding should only care up to a stride of 128,
    above this just serialize the whole 10 bits (should be very few of those)

    Also, increase the max index to 256 -- with relative encoding, it's
    more efficient to just send indices vs. all bits in most cases.

    -----------------------------------------------------------------------

    Split position into grid cells xyz and intra cell fractional bits

    Use this to reduce cost of position sync

    Extend delta encoding to have one bit if cell index has changed,
    therefore in the common case bit is 0, not changed and we only
    need to send fractional bits for the position

    -----------------------------------------------------------------------

    Can we do even better? If the average position change is smaller than
    the cell size in RTT (it is), then we can recognize this and encode
    that smaller.

    Lets say cell size is large (4 meters sq)

    eg. if has moved 25cm-50cm or less then can encode with much less bits

    If this is a common case, this is a big win for moving cubes.

    Ideally, come up with some technique to determine the average position
    difference, maybe even graph the distribution while the game is running
    at a given RTT.

    This would make a cool diagram.

    -----------------------------------------------------------------------

    Encode orientation relative to previous orientation

    If the orientation is within 10 degrees, encode with much less bits,
    otherwise just serialize the existing full size quaternion smallest 3.

    -----------------------------------------------------------------------

    Ready to write "Snapshot Compression" article

    -----------------------------------------------------------------------
