DONE:

TODO:

    Next define internals of connection. I want there to be user defined number of channels (config)

    Each channel can send data down, and has a reliable-ordered set of events.

    These reliable ordered events can be small or large, bigger than packet size.

    This unifies treatement of events vs. chunks and makes ordering of data simpler
    when sending across the network connection. If you send a large block of data
    all other elements will just block waiting for that to be received.

INTERNET READY:

    Implement proper range encoder. Don't do a bitpacker this time that's already been done.

    Study how it works. Implement something that encodes and decodes in-place. Optimize for CPU later.

    Add encryption for packets, assuming that matchmaker will provide secret key, any fast key
    based encryption is acceptable. Do this at the network interface level, eg. network interface
    accepts a key. If the key is a non-empty string, apply the encrytion before send, and decrypt
    on recvfrom.

    Make sure there is some checksum or basic check for packets, eg. signing packets. tamper check.
    Reuse the same key for encryption if possible. Research this and study how it is done.

OPTIMIZATION:

    Optimize range encoder

    Send and receive queues should be lockless threadsafe

    Separate send and receive threads for NetworkInterface

    Investigate different methods for sending and receiving UDP packets,
    eg. completion ports on Win32, whatever method is fastest on linux etc.

    Run throughput tests with linux hosts. Test CPU usage etc.
