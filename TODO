DONE:

    Setup per-instance properties for go stone rendering:

        1. BaseColor
        2. Metallic
        3. Specular
        4. Roughness

    Can't add these to the vertex attribute yet, because they are not used by the shader.

    Need to split out the concept of "Model" from "Mesh" and make the mesh only the IBO/VBO.

TODO:

    To create a model you must pass in both a shader *and* a mesh.

    For the moment models will be just one type, the stone model, but eventually
    there could be different model types with different vertex setups.

    For the moment do everything specific to the stone in the model,
    but eventually there could be multiple model types with different
    shaders and different per-instance data that needs setup in different
    ways.

    For example, some models would have texture coordinates in the mesh
    and would need to be setup to access those coordinates from there,
    while the stone will generate texture coordinates in the vertex shader.

    ----------------------------------

    Model manager should detect when either shader, or mesh is dirty and
    recreate all of the stuff on top (eg. instance buffer, VAO and all its setup)
    at will.

    This will allow the code to easily handle dynamically reloading mesh data,
    texture data, shaders...

    Must be coded this way from the beginning so the code is designed to handle this.

    ----------------------------------

    Continue implementation hooking up base color, specular, roughness etc.

    Setup roughness parameter. What range is it in the UE4 model?

    Work out how to sample the cubemap with roughness indexing into the mipmap trilinear filtering.

    Setup an array of stones with roughness parameter increasing with x coordinate across range

    ----------------------------------

    Study UE4 shader model to understand the inputs and controls. What range each is. How they work.

    http://blog.selfshadow.com/publications/s2013-shading-course/

    ----------------------------------

    Try to get my own basic model working

    Implement a scale from non-metal to metal on the y axis.

    ----------------------------------

    Implement base color black/white and allow switching between black and white.

    ----------------------------------

    Identify areas where my math is weak and work to study those parts.

    ----------------------------------

    Research how to work in linear space and then convert to RGB at the end with tonemapping.

    ----------------------------------

    Continue studying trip through the graphics pipeline.

    ----------------------------------

    Get go board rendering working.

    ----------------------------------

    Research raytracing signed distance fields for shadows

    ----------------------------------
