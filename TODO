DONE:

TODO:

    -------------------------------------------------------------------------

    Implement priority bubble up, pull, push.

    Need to first get priority for all cubes this frame.

    This is a simple function, if red the cube has high priority, if player cube extreme high priority.

    Once this priority float is created (array float), then pass over existing struct 
    { float accum, int index } and add delta Time * priority to accum.

    Copy this struct and sort highest accum to smallest.

    Take the n most important cube indices and put them in an array for potentially
    being included in a packet.

    Serialize measure these cube indices and mark which ones actually should be sent.

    Take the ones that are to be sent and clear their priority accum to zero.

    -------------------------------------------------------------------------

    Send packet from left to right containing most important n cube state
    that should be sent (according to measure)

    -------------------------------------------------------------------------

    When this packet arrives print to make sure it's being received.

    -------------------------------------------------------------------------

    Implement jitter buffer

    -------------------------------------------------------------------------

    Add code so the sim doesn't run on the right until the first packet comes in.

    -------------------------------------------------------------------------

    Set remote input to input in packet.

    Set right side time to frame # in packet (does it need to be sent or can it be inferred from sequence?)

    I think it can be inferred from sequence. Big win.

    Push cube state to right side sim

    -------------------------------------------------------------------------

    Implement serialize measure per-state before writing so we can set a hard
    limit on the packet size, eg. measure precise packet size for bandwidth
    limit and set the payload at that size precisely.

    -------------------------------------------------------------------------

    Encode position relative to center quantized integer point.

    Output the data set and optimize the encoding (single var most likely).

    Maybe try multiple var two-level encoding?

    -------------------------------------------------------------------------

    Implement error reduction for position (smoothing)

    -------------------------------------------------------------------------

    Implement error reduction for orientation (smoothing)

    -------------------------------------------------------------------------

    Might be cool to have a fake lag switch when you press a button,
    eg. no packets come through for one second.

    Or a mode that every few seconds lets no packets in for one second.

    Will be a cool visual demonstration of how the stateful sync works,
    and recovers from errors (like errors in a video stream...)

    -------------------------------------------------------------------------

    Write stateful synchronization article

    -------------------------------------------------------------------------

    Write conclusion article (pros/cons of each technique) ---> SHORT

    Need this because I need the arc of conclusion for the GDC talk.

        1. The simulation

        2. Deterministic lockstep

        3. Snapshots and interpolation

            *** snapshot compression worked example ***

        4. Stateful synchronization

        5. Conclusion: Pros/cons

        6. Question time: latency hiding, client/server, implementation details etc.

    -------------------------------------------------------------------------

    Make a list of diagrams that need to be created.

    Sketch out the diagrams roughly with pencil/paper.

    Once the basic outline is working hand over to Chantel to create the diagrams w. illustrator.

    Finish slides for GDC.

    -------------------------------------------------------------------------

    Implement javascript to pause video when it is not currently visible

    -------------------------------------------------------------------------