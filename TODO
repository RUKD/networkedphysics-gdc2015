DONE:

TODO:

    Implement hacked up hermite interpolation function for an array of cubes

    Implement hacked up extrapolation for array of cubes.

    -----------------------------------------------------------------------

    Copy playout delay buffer and call it SnapshotInterpolationBuffer

    Derive it from the old sliding window with holes.

    It's actually going to be memory intensive, as it needs 900 cube states
    per-frame.

    Therefore it should not buffer a lot of unnecessary stuff.

    I think it only needs to hold 250ms of stuff.

    At 60fps that is 15 frames only.

    It would be nice if it naturally hot-cold split...

    eg. had a separation of the index data for snapshot (exists, sequence)
    and the actual data itself.

    It would be very slow to iterate across this sliding window
    if sequence and exists were 900 cube states apart.

    Perhaps the sliding window needs to be refactored to have this hot-cold
    split built in?

    -----------------------------------------------------------------------

    Get linear interpolation working @ 10pps

    -----------------------------------------------------------------------

    Get hermite interpolation working @ 10pps

    Note: Need to send linear and angular velocity for this one!

    This should be noticeably higher quality than linear interpolation.

    It has to be to justify the extra velocity bandwidth.

    -----------------------------------------------------------------------




























    -----------------------------------------------------------------------

    At this point start investigating compression approaches

    -----------------------------------------------------------------------

    Network simulator could have a flag set to actually perform the serialization of packets.

    Should be on by default.

    Clean up code that is manually serializing packets. 

    Let the network simulation do it for us instead. Less code!

    Extend network simulation to keep track of bandwidth send, given
    specific packet header size (eg: 24 bytes).

    -----------------------------------------------------------------------

    First obvious win is if the object is at rest, send one bit
    and don't send lin/ang velocity.

    Many objects are at rest. This is a big win.

    -----------------------------------------------------------------------

    Next compress orientation. It's the biggest (16 bytes).

    Can get it down to 32 bytes pretty easily.

    Smallest three.

    -----------------------------------------------------------------------

    Compress linear and angular velocity.

    Restrict linear and angular velocity to some maximum.

    Can be aggressive with linear velocity because can be bounded tightly.

    Be aggressive with linear/ang velocity resolution. Can synchronize it
    quite roughly. It's not actually used for extrapolation, just interpolation
    so near enough is pretty good!

    -----------------------------------------------------------------------

    Finally... position...

    Bound the position in xy

    Bound position height (z) (i forget?)

    Compress position to 1cm resolution.

    How good is it?

    Can we do better?

    *** I'm thinking this needs two articles ***

    -----------------------------------------------------------------------


    




    -------------------------------------------

    Would be great to be able to quickly define a packet factory with macros.

    It's all very boilerplate. Annoying to cut & paste code it each time.

    Pass over all packet factories and convert to use the macros!

    --------------------------------------------
