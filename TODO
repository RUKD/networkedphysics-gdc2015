DONE:

    Things to do to get the large block codepath working:

        1. Implement code to include a fragment in packet data     <-- DONE

        2. Implement code to fill the sent packet entry            <-- DONE
           for fragments, so they can be acked. Need both
           message id for block, and fragment id.

        3. Implement code to process ack, lookup block by id       <--- DONE
           id and fragment, and mark that fragment as acked,
           and once all fragments are acked, go to next msg
           in send queue.

        4. Implement code to serialize read/write fragment data.
           It's OK to copy the fragment data from the packet to/from
           the actual block itself, this is no problem given small
           fragment sizes, and it makes the code implementation
           much easier (actual block remains private to the channel)

TODO:

        5. Implement code to take that serialize fragment data
           and copy it in to the block itself on receive,
           track received vs. not received fragments, and
           queue the actual block up in receive queue once
           all fragments have been received.

    Hey, I have to store the actual block size inside the block itself,
    *OR* tag it along with every packet. I think i'll just tag it along
    for now, to avoid extra complexity.
    
    ----------------------

    Might be nice to add a validate step to the config for connection/channels
    because it's possible to specify a config that doesn't work now. eg. 
    interdependent parameters.

    ----------------------

    Move the channel budget out of the channel config (static)
    and in to the connection. 

    Channel budget should be dynamic. The user should be able to derive their own 
    connection type and specify channel budgets dynamically based on flow control, 
    for example.

    ----------------------

    Implement unreliable message channel.

    Implement something where if you pass in -1 to the channel budget,
    it gives that last channel access to the remaining bits in the packet.

    This prequires that a channel accurately estimates the bits it is 
    using in the packet data, eg. via return perhaps?

    We should verify that the estimated bits are >= the actual serialized
    bits on write. I'm OK if it is not exact, although it can be made so.

    After this is working, get the soak test working such that it 
    has a second channel of unreliable events with -1 budget.

    Send so many unreliable events that the packet is almost always full.

    Verify soak tests works, unreliable events get through etc.

    --------------

    Split project into .cpp and .h

    Setup premake.

    Setup basic lib structure: libprotocol

    Move the socket and system programming includes out of Common.h 
    and into Address.cpp and BSDSocketsInterface.cpp as required

    Need a way to build all tests and check they pass easily,
    eg. probably need some way for "TEST( test_... )" to register
    the set of tests with a static vector of test functors.

    Add UnitTest.cpp

    ------------------------

    Implement client and server interface.

    These should allow you to pass in a network interface, and then manage
    the set of connections on the server, one-per client', and on the client
    just have a single connection to the server.

    Note that there probably needs to be a state machine on the server
    and on the client to negotiate connection. Once connection is established
    the connection stabilizes mostly to the "Connection" packet type.

    Should also implement a reservation system at this point, with a reservation
    token, eg. reserve 4 slots for token X. Timeout or succeed the reservation
    and so on.

    --------------------

    It would be nice to bring back templated serialize functions, and have specialized
    read, write and measure streams. I think the code generated would be much more
    amenable to optimization, however before doing this I should definitely profile.

    ---------------------

    What is next?

    1) Start doing performance analysis (CPU, memory etc.)

    2) Investigate using a custom allocator. Potentially ditch STL usage at this point.

    3) Consider cost of shared_ptr. Is it slow? Where should I use it? Where should I not?

    4) Integrate the oodle library. Provide an #if USE_OODLE 1 type thing and hook it up
       for compression. Try it out in the stress test and see how it generates dictionaries
       and how much compression it gets post-dictionary and so on. Do not check in the oodle
       libs, but do check in the interface and source code that uses it.

    5) Implement encryption via key, plus hash to detect tampering (unified). Optional feature.

    6) Implement an unreliable channel (messages), 
       eg. queue up unreliable messages to send and discard any that don't fit in the packet.
       Bonus: Provide an optional functor to sort the unreliable messages in order of importance.

    7) Implement an atomic queue on top of the client and server interface for sending
       and receiving user packets. This interface should allow running the actual serialization
       and packet reading entirely on a separate thread. Do it here where it is most natural,
       to avoid overcomplicating the interface/connection code.
