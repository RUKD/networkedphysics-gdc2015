DONE:

    Add command to command history on enter, even if it doesn't match anything.

    Add command selection index, -1 means no selection.

    Add bool which is true if command history is empty.

    Implement function to find next command in buffer.

    Implement function to find previous command in buffer.

    Both can return null if the command history is empty, otherwise should always cycle.

    Implement command history, pressing UP/DOWN selects between command history in the command buffer.

    Works great.

TODO:

    Implement and render a flashing cursor at the text entry point.

    Add the concept of current cursor position left/right

    Don't bother adding selection, it's not worth it.

    ------------------

    Render a black alpha quad where the console should be (for now just one line of text)

    ------------------

    Need to do something so text is the same size between retina (windowed) and non-retina display (fullscreen)

    ------------------

    Determine size of the console (height) in characters. 

    Determine # of characters wide depending on screen resolution.

    Implement a data structure for the console, eg. # of lines. Each line
    is an array of text up to 1024 chars wide?

    It's a ring buffer. Text is initially just set to "" per-line

    Empty lines mean don't render anything (Eg. skip, entirely, no newline even...)

    Per-line should note if it's an error or a message or a command (red/white/blue)

    Dummy up some console text and render it.

    ------------------

    Render a quad for where the console should be. Console should take full screen width, like visor.

    Now render the text on top of the alpha quad.

    Bonus points, render a little extra drop-shadow at the bottom

    ------------------

    Should I redirect stdout to the console, or just implement my own logging functions
    that redirect to console instead? It's probably easier to just redirect, *but*
    it's nice to have the output go to stdout as well.

    ------------------

    The console should have its own JSON file, eg. Console.json

    Inside this it should specify the fonts to be used by the console.

    The console should be capable of reloading its settings on the fly.

    Redirect stdout and stderr output to the console.

    ------------------

    Have console off by default

    Implement key binding "~" to toggle the console on off

    Implement command history buffer, eg. up-down

    Implement scrolling in this console buffer, eg. page-up page-down, ctrl-up, ctrl-down,
    command-up, command-down.

    ------------------

    Implement console commands on client

    Implement quit console command, connect console command and disconnect.

    Should be able to connect to a server, disconnect from it, reconnect, then quit.

    ------------------

    Color the commands nicely so errors are colored, commands are colored,
    output from the game log is colored and so on.

    Put these color configurations inside config json files, eg. data/config/Console.json

    ------------------

    Add a log as well, output to client.log on server.log with append.

    Make sure that when a new instance of the program runs it puts a new
    header in there, or =========================== or something similar.

    ------------------

    Learn how to use chef/knife to setup the linux server properly with all
    the stuff I want automatically, vs. manually configuring it. eg. git,
    GCC and all that.

    Get the server loop setup properly. Server needs to update game and then sleep
    until time has elapsed for next frame. I think I have this code available
    from previous projects. Resurrect it.

    Find a nifty way with scripts to update the server on request, or automatically
    when git is checked in.

    Get the client/server workflow really tight!

    ------------------------------

    Add concept of console commands and console variables

    Hook up concept of client and server side console commands / convars

    Work out how to transmit these to the client on initial connect
    and then on each change.

    ------------------------------
