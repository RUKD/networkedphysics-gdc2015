DONE:

    Implement relative orientation encoding.

    Can relative orientation be efficient?

    How to encode it?

    Axis-angle?

    Yes. Axis angle makes sense.

    Axis within 0.1 seems to cover all motion from cube blow.

    This also handles all motion inside katamari.

    Seems to be a winner here.

    Getting so little coverage for axis not changing, it seems
    wise to skip ahead to the axis threshold... only picking up
    basically stationary cubes with quaternion.

    Might be a win to say, OK. quaternion has not changed (1 bit)

    There was a bug in quaternion to axis/angle. Fixed.

    Seems that a separate position not changed vs. orientation not changed
    would be a big win -- looks like while the cubes are sitting coming
    to rest they are maybe unnecessarily sending orientation?

    Actually, fixed by just relaxing orientation is the same check (0.01f)

TODO:


    -----------------------------------------------------------------------

    Convert both current and base to axis-angle.

    If current axis dot base axis < 0, invert current axis.

    If current axis - base axis distance squared is within epsilon,

    set relative orientation to true.

    Determine angle difference between axis.

    Send as angle difference if less than some angle threshold.

    Work out with red coloring what is a good angle threshold (float)

    Determine if the constant axis covers a large % of rotating objects or not (blow)

    -----------------------------------------------------------------------

    Next try checking if axis is within some small amount of distance

    Encode this with a small # of bits (must be a tiny difference)

    Determine if this markedly improves the encoding or not.

    For example, can I take the angle from the previous base and offset from that?

    Seems a bit... wrong but might work...

    -----------------------------------------------------------------------

    I'm thinking the big win here is axis-angle where the axis is the same between current and base.

    Is there still benefit if the axis changes by a small amount?

    I think yes.

    Do the axis the same angle change only and see how many are picked up by it.

    Next, do the short range axis change + angle change.

    Cannot expect to pick up everything, but make sure the small rotations are!

    -----------------------------------------------------------------------

    Simplify existing serialization code. It's getting a bit complex!

    -----------------------------------------------------------------------

    Implement relative indices on top of all other optimizations

    -----------------------------------------------------------------------

    Need some sort of bandwidth statistics split up into position, orientation, indices etc.

    -----------------------------------------------------------------------

    Ready to write "Snapshot Compression" article

    -----------------------------------------------------------------------
