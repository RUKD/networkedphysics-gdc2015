DONE:

TODO:

    ---------------------------

    Split apart quantize linear velocity option and at rest into two separate modes.

    ---------------------------

    Work out how many bits are used for serializing linear velocity @ 20pps
    eg. hack up the linear quantize manually with # of bits by converting
    explicitly to integer.

    ---------------------------

    Add an adjustable tightness factor to bandwidth and adjust so 20pps
    updates at roughly the same rate of bandwidth adjustment as 60pps.

    Probably going to go with tightness hand - tuned.

    ---------------------------

    Need to add quantized linear velocity to quantized cube state, and for demos
    that don't send the linear velocity need to make sure it is cleared always
    so operator == still works.

    Implement 20pps version of simulation with delta encoded linear velocity

    Should be signifinantly reduced bandwidth. I would hope sub 100kbps.

    ---------------------------

    Implement 3 snapshots per-packet redundant version with relative encoding

    Start with the oldest snapshot and encode the two next ones, this way
    the start snapshot is closer to the baseline.

    Then reduce playout delay buffer to 66ms.

    Even with 10% packet loss this should work fine with the small playout delay.

    In effect, we have traded a bit of extra bandwidth to compensate for packet loss,
    reducing the amount of playout delay buffer that is required (without the redundant sends,
    playout delay is used to compensate for packet loss...)

    ---------------------------

    Implement some bit counters for position, orientation, index, linear velocity
    such that I can tell exactly how many bits is used per component, as well as
    min/max/avg per-cube.

    Add some display prints for each mode and try some tuning.

    ---------------------------
