DONE:

TODO:

    ------------

    Can optimize messages id serialization quite a bit, by encoding next message id 
    relative to the previous one, eg. +1, +5, up to n where n would actually be small, 
    eg. half sliding window size.

    Common case would probably be a bunch of messages in order too, eg.
    one bit = +1, repeated n times.

    This is a big optimization.

    What would also be awesome about this is that this would convert
    the message ids into something that is more likely to be *constant*
    or at least, would often have repeating patterns from packet to packet.

    When doing this, make sure that the message types are followed
    by the message ids in a separate array, vs. being interleaved
    with message data.

    This would help out the dictionary based LZ compressor quite a bit,
    vs. the current bunch of message ids that change from packet to packet.

    -----------------

    Implement an aligned memcpy in/out of bitpacker when writing bytes.

    This is much faster than going through the bitpacking codepath.

    -----------------

    Add code on server to send server data block to client.

    Block must be *constant*. eg. add it as part of server config

    Server sends one block fragment per-packet. No need for complicated reliability.

    Client replies with a separate packet acking each fragment he sees. Nothing complicated.

    Server just keeps sending them until all acked.

    Once server has acks for every fragment, go into the requesting client block state.

    Client should store, and make the server data block accessible via accessor.

    Add unit test to verify it's working, make sure to check the block size and contents match.

    ------------------------

    Some thing in reverse for client -> server block.

    Once the block transfers have completed, go to connected state.

    Make client block accessible per-server, and make sure it is cleared when the client disconnects.

    Add test to verify server receives the correct size block and contents from the client.

    ------------------------









    *** SEND TABLES ***

    ---------------

    Implement send table concept. Implement delta encoding tables etc.

    Use the server data to communicate this table down to the client.

    ------------------------

    Actually implement a client/server setup and host the server in the cloud.

    Provide build steps using chef/knife or whatever to easily deploy this server.

    ------------------------









WOULD BE NICE:

    -----------------

    Implement fragmentation and reassembly for large packets, do this
    at the connection level once we have large snapshots, this would
    probably be a good idea to have -- set MTU to 1200 bytes.

    ----------------

    Add counters for all the different things inside the large blocks,
    eg. # of large blocks sent, received, read/written, also # of
    fragments read/written.

    Write some basic tests to verify these counters are functional.

    ----------------------

    I'd like a logging system. It's annoying to have to comment out and re-enable
    logs as I debug things. Would be nice to be able to have logs like Deja.

    ------------------

    Might be nice to add a validate step to the config for connection/channels
    because it's possible to specify a config that doesn't work now. eg. 
    interdependent parameters.

    Would be nice if the reliable message channel could report the minimal functional
    budget that would work for it, given its configuration. This would be great
    for the connection to budget for the channel.

    This should be in the base class for channel interface, so we can generically
    work with and budget channels decently without knowing exactly what they are.

    ----------------------

    Move the channel budget out of the channel config (static)
    and in to the connection. 

    Channel budget should be dynamic. The user should be able to derive their own 
    connection type and specify channel budgets dynamically based on flow control, 
    for example.

    --------------

    Add a fast path for read/write bytes when the bitpacker is aligned,
    eg. just copy in/out with memcpy vs. actually doing bits level ops.

    --------------

    It would be nice to bring back templated serialize functions, and have specialized
    read, write and measure streams. I think the code generated would be much more
    amenable to optimization, however before doing this I should definitely profile.

    --------------------

    Instead of walking the send queue to find the oldest message id not acked,
    cache this value, and on each update, walk left to right to skip past acked
    messages in the send queue to get the new value.

    --------------------

    Optimization for fragments, track oldest unacked fragment id, and start there
    and go left to right to search for fragments to send.

    Add a new fragmentSendWindow config, eg. 64 and only look this far past
    the oldest unacked fragment. Should save unnecessary scans for large block
    sizes.

    --------------------

    Optimize the block send and receive to not require a data copy or allocation
    for each fragment data block, use pointers and directly serialize in/out of
    block data instead.

    --------------------

    Could save a bit of memory by switching the received fragment data to a bitfield

    We only need one bit per-fragment, "has it been received?"

    ---------------------

    What is next?

    1) Start doing performance analysis (CPU, memory etc.)

    2) Investigate using a custom allocator. Potentially ditch STL usage at this point.

    3) Consider cost of shared_ptr. Is it slow? Where should I use it? Where should I not?

    4) Integrate the oodle library. Provide an #if USE_OODLE 1 type thing and hook it up
       for compression. Try it out in the stress test and see how it generates dictionaries
       and how much compression it gets post-dictionary and so on. Do not check in the oodle
       libs, but do check in the interface and source code that uses it.

    5) Implement encryption via key, plus hash to detect tampering (unified). Optional feature.

    6) Implement an unreliable channel (messages), 
       eg. queue up unreliable messages to send and discard any that don't fit in the packet.
       Bonus: Provide an optional functor to sort the unreliable messages in order of importance.

    7) Implement an atomic queue on top of the client and server interface for sending
       and receiving user packets. This interface should allow running the actual serialization
       and packet reading entirely on a separate thread. Do it here where it is most natural,
       to avoid overcomplicating the interface/connection code.

    ----------------
