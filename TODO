DONE:

TODO:

    Implementfont tool that processes the fonts in the data/font directory and 
    outputs to bin/data/fonts/... processed sets of textures for each font character.

    Implement a loader for this font, loader should pass in name

    There should be a font manager than allows you to name fonts, eg. "italic"
    while loading it from a specific directory eg "fonts/InputMonoLight/Italic",
    this way the game can customize how fonts are seen by the game.

    Render some basic text in OpenGL

    ------------------------------

    Implement a quake style console.

    Redirect stdout and stderr output to the console.

    Implement keyboard input to type text into this console.

    ------------------

    Implement some sort of key binding system, eg. bind a key to an action

    Use this key binding system to bind keys to pageup, pagedown, ctrl-up, ctrl-down
    and so on to control the console. Don't hardcode it!

    This probably requires implementing the concept of "FOCUS"

    eg. the game has focus, vs. the console having focus.

    We need a window manager or a focus manager or something. The game needs to have
    it's own interface on the client that implements input focus so it is passed
    inputs when the console doesn't have focus.

    ------------------

    Have console off by default (previous was on)

    Implement key binding "~" to toggle the console on off

    Implement escape to quit the game (maybe with yes/no prompt, with enter/escape as cancel?)

    Implement command history buffer, eg. up-down

    Implement scrolling in this console buffer, eg. page-up page-down, ctrl-up, ctrl-down,
    command-up, command-down.

    ------------------

    Implement console commands on client

    Implement quit console command, connect console command and disconnect.

    Should be able to connect to a server, disconnect from it, reconnect, then quit.

    ------------------

    Color the commands nicely so errors are colored, commands are colored,
    output from the game log is colored and so on.

    Put these color configurations inside config json files, eg. data/config/console.cfg

    Find a cheap JSON parser I can include for config files.

    I typically want new JSON configs read to override values for old, is this possible
    with JSON parsers easily? eg. overrides. This is important for users to be able to
    override settings specified by the game.

    Not sure if JSON is the correct solution anymore. May be too complex (don't need tree)

    ------------------

    Add a log as well, output to client.log on server.log with append.

    Make sure that when a new instance of the program runs it puts a new
    header in there, or =========================== or something similar.

    ------------------

    Learn how to use chef/knife to setup the linux server properly with all
    the stuff I want automatically, vs. manually configuring it. eg. git,
    GCC and all that.

    Get the server loop setup properly. Server needs to update game and then sleep
    until time has elapsed for next frame. I think I have this code available
    from previous projects. Resurrect it.

    Find a nifty way with scripts to update the server on request, or automatically
    when git is checked in.

    Get the client/server workflow really tight!

    ------------------------------

    Add concept of console commands and console variables

    Hook up concept of client and server side console commands / convars

    Work out how to transmit these to the client on initial connect
    and then on each change.

    ------------------------------

NOTES:

    ---------------------------

    It's annoying and complicated to create a game server.

    It's really nice that it's completely configurable,
    but the config being passed in to the constructor makes it
    difficult to create a derived class that just creates how
    it wants to.

    Maybe an init method would be a better idea? Even if it's internal...

    I really want the game client and server to be self contained, eg. own all objects they use

    ---------------------------

    I want the client to have callbacks for pretty much everything that happens, eg. 
    te be able to get callbacks on client connect, disconnect, to be able to override
    packet receives (eg. process more packet types) and so on.

    ---------------------------

    The network simulator is coded in such a way that it is annoying to use
    for a real application. I don't want it to randomly cycle between settings
    automatically. I want the user to be able to choose between a series of presets.

    ---------------------------

    It's really annoying not being able to create an address passing in dynamic port,
    eg. Address( "::1", ServerPort ) should be a thing.
    
    ---------------------------

    Client connect takes over 1 second. Optimize!

    ---------------------------