DONE:

    Seem to be two separate issues:

        1. Somehow the two different fonts being rendered shit on each other

        2. Something strange with the commandString values causing only the first character to be drawn (even with fps disabled)

    I don't really know what is going on here... it seems completely mysterious!

    It's something to do with the instanced rendering.

    When the instance rendering is disabled the issue stops happening.

    I think there is still a bad vertex buffer bound somewhere...

    Confirmed. If I render a normal stone without instancing, the problem doesn't occur.

    It's something happening that is triggered by instanced rendering the stones.

    What state is getting stuck on?

    For the moment, I am ignoring this so I can complete work on the console.

    Add another function for ENTER, eg. execute, which calls a callback with the current command string and clears the chars

    Implement backspace.

    Text entry seems sluggish. I think it is caused by lack of a cursor.

    Also seems less sluggish in fullscreen. I think double/triple buffering is kicking in there.

    There is still some weird interaction between the FPS display and the console text. I don't understand it. Fucking OpenGL

    It seems that the interaction occurs when you type text *before* the FPS font is first used. I think the FPS
    initialization kicks in and does something to the previous font VBO or something. FUCK ME DEAD

    Can't seem to get CTRL-C selected. It seems eaten by the OS.

    Opting to "ESCAPE" to cancel the current command, and using APPLE-Q to quit (more deliberate, but not as nice as plain ESCAPE)

    Implemented ` detection to enable/disable the console.

    Added some code to each the ` char after the console was just turned on.

    Probably need to add some code to eat the ` after the console was just disabled.

    Make sure that the console renders ON TOP OF the FPS display and everything else.

TODO:

    Render a grey quad where the console should be (for now just one line)

    Implement a cursor and a concept of current cursor position left/right

    Don't bother implementing selection it's not worth it.

    Add command to command history on enter, even if it doesn't match anything.

    Implement command history, pressing UP/DOWN selects between command history in the command buffer.

    ------------------

    Implement console class (Console.cpp) and add to globals

    Implement an update and render method, as well as keyboard input handler function.

    When keys are pressed add to string.

    When enter is pressed clear the string.

    Render the string

    ------------------

    Determine size of the console (height) in characters. 

    Determine # of characters wide depending on screen resolution.

    Implement a data structure for the console, eg. # of lines. Each line
    is an array of text up to 1024 chars wide?

    It's a ring buffer. Text is initially just set to "" per-line

    Empty lines mean don't render anything (Eg. skip, entirely, no newline even...)

    Per-line should note if it's an error or a message or a command (red/white/blue)

    Dummy up some console text and render it.

    ------------------

    Render a quad for where the console should be. Console should take full screen width, like visor.

    Now render the text on top of the alpha quad.

    Bonus points, render a little extra drop-shadow at the bottom

    ------------------

    Should I redirect stdout to the console, or just implement my own logging functions
    that redirect to console instead? It's probably easier to just redirect, *but*
    it's nice to have the output go to stdout as well.

    ------------------

    The console should have its own JSON file, eg. Console.json

    Inside this it should specify the fonts to be used by the console.

    The console should be capable of reloading its settings on the fly.

    Redirect stdout and stderr output to the console.

    ------------------

    Have console off by default

    Implement key binding "~" to toggle the console on off

    Implement command history buffer, eg. up-down

    Implement scrolling in this console buffer, eg. page-up page-down, ctrl-up, ctrl-down,
    command-up, command-down.

    ------------------

    Implement console commands on client

    Implement quit console command, connect console command and disconnect.

    Should be able to connect to a server, disconnect from it, reconnect, then quit.

    ------------------

    Color the commands nicely so errors are colored, commands are colored,
    output from the game log is colored and so on.

    Put these color configurations inside config json files, eg. data/config/Console.json

    ------------------

    Add a log as well, output to client.log on server.log with append.

    Make sure that when a new instance of the program runs it puts a new
    header in there, or =========================== or something similar.

    ------------------

    Learn how to use chef/knife to setup the linux server properly with all
    the stuff I want automatically, vs. manually configuring it. eg. git,
    GCC and all that.

    Get the server loop setup properly. Server needs to update game and then sleep
    until time has elapsed for next frame. I think I have this code available
    from previous projects. Resurrect it.

    Find a nifty way with scripts to update the server on request, or automatically
    when git is checked in.

    Get the client/server workflow really tight!

    ------------------------------

    Add concept of console commands and console variables

    Hook up concept of client and server side console commands / convars

    Work out how to transmit these to the client on initial connect
    and then on each change.

    ------------------------------
